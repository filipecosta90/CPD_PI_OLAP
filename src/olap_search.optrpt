Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


Begin optimization report for: getfield(char *, int, char *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(58,3)
   remark #15527: loop was not vectorized: function call to strtok(char *__restrict__, const char *__restrict__) cannot be vectorized   [ olap_search.c(59,21) ]
LOOP END
===========================================================================

Begin optimization report for: print_csc(float *, int *, int *, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(73,5)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(74,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(77,5)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(78,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(81,5)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(82,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: print_csc_vector(float *, int *, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(96,5)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(97,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(100,5)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(101,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: print_csr(float *, int *, int *, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(118,5)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(119,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(123,5)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(124,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(128,5)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(129,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: convert_and_write_to_csv(char *, float *, int *, int *, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(185,5)
   remark #15523: loop was not vectorized: loop control variable pos was found, but loop iteration count cannot be computed before executing the loop
LOOP END
===========================================================================

Begin optimization report for: read_from_mx(char *, float **, int **, int **, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(218,30)
   remark #15523: loop was not vectorized: loop control variable element_number was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at olap_search.c(252,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(252,3)
   remark #15389: vectorization support: reference coo_values has unaligned access   [ olap_search.c(253,5) ]
   remark #15389: vectorization support: reference aux_coo_values has unaligned access   [ olap_search.c(253,5) ]
   remark #15389: vectorization support: reference coo_columns has unaligned access   [ olap_search.c(254,5) ]
   remark #15389: vectorization support: reference aux_coo_columns has unaligned access   [ olap_search.c(254,5) ]
   remark #15388: vectorization support: reference coo_rows has aligned access   [ olap_search.c(255,5) ]
   remark #15389: vectorization support: reference aux_coo_rows has unaligned access   [ olap_search.c(255,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.926
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 6.750 
   remark #15478: estimated potential speedup: 2.430 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(252,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: tbl_read(char *, int, int *, int *, int *, float **, int **, int **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(338,30)
   remark #15523: loop was not vectorized: loop control variable element_number was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at olap_search.c(58,3) inlined into olap_search.c(341,13)
      remark #15527: loop was not vectorized: function call to strtok(char *__restrict__, const char *__restrict__) cannot be vectorized   [ olap_search.c(59,21) ]
   LOOP END
LOOP END

LOOP BEGIN at olap_search.c(421,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(421,5)
   remark #15388: vectorization support: reference A_IA has aligned access   [ olap_search.c(422,9) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 4.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 3 
   remark #15477: vector loop cost: 0.750 
   remark #15478: estimated potential speedup: 3.640 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(421,5)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: tbl_get_number_elements(char *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(454,71)
   remark #15523: loop was not vectorized: loop control variable element_number was found, but loop iteration count cannot be computed before executing the loop
LOOP END
===========================================================================

Begin optimization report for: tbl_read_csc(char *, int, int, int *, int *, int *, float **, int **, int **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(514,3)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria

   LOOP BEGIN at olap_search.c(58,3) inlined into olap_search.c(550,13)
      remark #15527: loop was not vectorized: function call to strtok(char *__restrict__, const char *__restrict__) cannot be vectorized   [ olap_search.c(59,21) ]
   LOOP END
LOOP END

LOOP BEGIN at olap_search.c(73,5) inlined into olap_search.c(584,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(74,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(77,5) inlined into olap_search.c(584,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(78,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(81,5) inlined into olap_search.c(584,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(82,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: tbl_read_csc_measure(char *, int, int, int *, int *, int *, float **, int **, int **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(642,3)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria

   LOOP BEGIN at olap_search.c(58,3) inlined into olap_search.c(648,13)
      remark #15527: loop was not vectorized: function call to strtok(char *__restrict__, const char *__restrict__) cannot be vectorized   [ olap_search.c(59,21) ]
   LOOP END
LOOP END

LOOP BEGIN at olap_search.c(73,5) inlined into olap_search.c(673,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(74,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(77,5) inlined into olap_search.c(673,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(78,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(81,5) inlined into olap_search.c(673,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(82,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: col_read_csc(char *, int, int *, int *, int *, float **__restrict__, int **__restrict__, int **__restrict__)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(731,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(733,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(736,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(739,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(742,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(745,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(748,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(751,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(755,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(759,7) ]
   remark #15382: vectorization support: call to function fgets(char *__restrict__, int, FILE *__restrict__) cannot be vectorized   [ olap_search.c(762,5) ]
   remark #15382: vectorization support: call to function g_quark_from_string(const gchar *) cannot be vectorized   [ olap_search.c(768,25) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(73,5) inlined into olap_search.c(796,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(74,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(77,5) inlined into olap_search.c(796,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(78,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(81,5) inlined into olap_search.c(796,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(82,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: col_read_csc_measure(char *, int, int *, int *, int *, float **__restrict__, int **__restrict__, int **__restrict__)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(849,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(851,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(854,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(857,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(860,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(863,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(866,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(869,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(873,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(877,7) ]
   remark #15382: vectorization support: call to function fgets(char *__restrict__, int, FILE *__restrict__) cannot be vectorized   [ olap_search.c(880,5) ]
   remark #15382: vectorization support: call to function strtod(const char *__restrict__, char **__restrict__) cannot be vectorized   [ /usr/include/stdlib.h(281,10) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(73,5) inlined into olap_search.c(905,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(74,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(77,5) inlined into olap_search.c(905,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(78,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(81,5) inlined into olap_search.c(905,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(82,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: tbl_read_measure(char *, int, int *, int *, int *, float **, int **, int **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(953,30)
   remark #15523: loop was not vectorized: loop control variable element_number was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at olap_search.c(58,3) inlined into olap_search.c(956,13)
      remark #15527: loop was not vectorized: function call to strtok(char *__restrict__, const char *__restrict__) cannot be vectorized   [ olap_search.c(59,21) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: tbl_read_filter(char *, int, int, char *, int *, int *, int *, float **, int **, int **, int **, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1046,30)
   remark #15523: loop was not vectorized: loop control variable element_number was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at olap_search.c(58,3) inlined into olap_search.c(1050,13)
      remark #15527: loop was not vectorized: function call to strtok(char *__restrict__, const char *__restrict__) cannot be vectorized   [ olap_search.c(59,21) ]
   LOOP END
LOOP END

LOOP BEGIN at olap_search.c(1109,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1109,3)
   remark #15389: vectorization support: reference coo_values has unaligned access   [ olap_search.c(1110,5) ]
   remark #15389: vectorization support: reference aux_coo_values has unaligned access   [ olap_search.c(1110,5) ]
   remark #15389: vectorization support: reference coo_columns has unaligned access   [ olap_search.c(1111,5) ]
   remark #15388: vectorization support: reference coo_rows has aligned access   [ olap_search.c(1112,5) ]
   remark #15389: vectorization support: reference aux_coo_rows has unaligned access   [ olap_search.c(1112,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.605
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 14 
   remark #15477: vector loop cost: 4.750 
   remark #15478: estimated potential speedup: 2.820 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1109,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: tbl_read_filter_and(char *, int, int, char *, int, char *, int *, int *, int *, float **, int **, int **, int **, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1187,30)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at olap_search.c(58,3) inlined into olap_search.c(1191,13)
      remark #15527: loop was not vectorized: function call to strtok(char *__restrict__, const char *__restrict__) cannot be vectorized   [ olap_search.c(59,21) ]
   LOOP END
LOOP END

LOOP BEGIN at olap_search.c(1264,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1264,3)
   remark #15389: vectorization support: reference coo_values has unaligned access   [ olap_search.c(1265,5) ]
   remark #15389: vectorization support: reference aux_coo_values has unaligned access   [ olap_search.c(1265,5) ]
   remark #15389: vectorization support: reference coo_columns has unaligned access   [ olap_search.c(1266,5) ]
   remark #15388: vectorization support: reference coo_rows has aligned access   [ olap_search.c(1267,5) ]
   remark #15389: vectorization support: reference aux_coo_rows has unaligned access   [ olap_search.c(1267,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.605
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 14 
   remark #15477: vector loop cost: 4.750 
   remark #15478: estimated potential speedup: 2.820 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1264,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: csr_csr_square_reshape(float **, int **, int **, int *, int *, int *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1346,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1346,3)
   remark #15389: vectorization support: reference new_csr_values has unaligned access   [ olap_search.c(1347,5) ]
   remark #15388: vectorization support: reference new_ja has aligned access   [ olap_search.c(1348,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.778
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 7 
   remark #15477: vector loop cost: 2.250 
   remark #15478: estimated potential speedup: 2.960 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1346,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1352,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1352,3)
   remark #15388: vectorization support: reference new_ia has aligned access   [ olap_search.c(1353,5) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 3.667
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 3 
   remark #15477: vector loop cost: 0.750 
   remark #15478: estimated potential speedup: 3.670 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1352,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: csc_csc_square_reshape(float **, int **, int **, int *, int *, int *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1412,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1412,3)
   remark #15389: vectorization support: reference A_csc_values has unaligned access   [ olap_search.c(1413,7) ]
   remark #15388: vectorization support: reference A_JA_csc has aligned access   [ olap_search.c(1414,7) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.778
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 7 
   remark #15477: vector loop cost: 2.250 
   remark #15478: estimated potential speedup: 2.960 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1412,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1418,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1418,3)
   remark #15388: vectorization support: reference A_IA_csc has aligned access   [ olap_search.c(1419,7) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 3.667
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 3 
   remark #15477: vector loop cost: 0.750 
   remark #15478: estimated potential speedup: 3.670 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1418,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: csc_to_csr_mx_selection_and(float *, int *, int *, int, int, int, int, char *, int, char *, float **, int **, int **, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1473,3)
   remark #15527: loop was not vectorized: function call to strcmp(const char *, const char *) cannot be vectorized   [ olap_search.c(1482,25) ]
LOOP END
===========================================================================

Begin optimization report for: csc_to_csc_mx_selection_and(float *, int *, int *, int, int, int, int, char *, int, char *, float **, int **, int **, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1592,3)
   remark #15382: vectorization support: call to function g_quark_to_string(GQuark) cannot be vectorized   [ olap_search.c(1597,21) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between aux_csc_col_ptr line 1593 and A_row_ind line 1597
   remark #15346: vector dependence: assumed ANTI dependence between A_row_ind line 1597 and aux_csc_col_ptr line 1593
LOOP END
===========================================================================

Begin optimization report for: csr_mx_selection_or(float *, int *, int *, int, int, int, int, char *, int, char *, float **, int **, int **, int *, int *, int *, int **, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1648,11)
   remark #15389: vectorization support: reference C_IA has unaligned access
   remark #15389: vectorization support: reference A_IA has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.118
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15459: masked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 12.750 
   remark #15478: estimated potential speedup: 0.390 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1648,11)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1649,11)
   remark #15389: vectorization support: reference C_JA has unaligned access
   remark #15389: vectorization support: reference A_JA has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.118
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15459: masked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 12.750 
   remark #15478: estimated potential speedup: 0.390 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1649,11)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1657,3)
   remark #15382: vectorization support: call to function g_quark_to_string(GQuark) cannot be vectorized   [ olap_search.c(1661,21) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between C_csr_values line 1689 and C_csr_values line 1689
   remark #15346: vector dependence: assumed OUTPUT dependence between C_csr_values line 1689 and C_csr_values line 1689
LOOP END
===========================================================================

Begin optimization report for: csr_mx_selection(float *, int *, int *, int, int, int, int, char *, float **, int **, int **, int *, int *, int *, int **, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1710,11)
   remark #15389: vectorization support: reference C_IA has unaligned access
   remark #15389: vectorization support: reference A_IA has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.118
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15459: masked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 12.750 
   remark #15478: estimated potential speedup: 0.390 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1710,11)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1711,11)
   remark #15389: vectorization support: reference C_JA has unaligned access
   remark #15389: vectorization support: reference A_JA has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.118
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15459: masked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 12.750 
   remark #15478: estimated potential speedup: 0.390 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1711,11)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1719,3)
   remark #15527: loop was not vectorized: function call to strcmp(const char *, const char *) cannot be vectorized   [ olap_search.c(1725,27) ]
LOOP END
===========================================================================

Begin optimization report for: csc_tbl_write(char *, float *, int *, int *, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1753,3)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(1759,7) ]
LOOP END
===========================================================================

Begin optimization report for: csr_tbl_write(char *, float *, int *, int *, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1814,3)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(1820,7) ]
LOOP END
===========================================================================

Begin optimization report for: csr_measure_tbl_write(char *, float *, int *, int *, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1875,3)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(1880,7) ]
LOOP END
===========================================================================

Begin optimization report for: csr_vector_write(char *, float *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1900,3)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(1906,9) ]
LOOP END
===========================================================================

Begin optimization report for: csr_measure_vector_write(char *, float *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1924,3)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(1926,7) ]
LOOP END
===========================================================================

Begin optimization report for: csr_hadamard(float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float **__restrict__, int **__restrict__, int **__restrict__, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(2047,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(2047,3)
   remark #15389: vectorization support: reference C_JA1 has unaligned access   [ olap_search.c(2054,5) ]
   remark #15389: vectorization support: reference A_IA1 has unaligned access   [ olap_search.c(2049,15) ]
   remark #15389: vectorization support: reference B_IA1 has unaligned access   [ olap_search.c(2050,15) ]
   remark #15389: vectorization support: reference B_csc_values has unaligned access   [ olap_search.c(2053,5) ]
   remark #15389: vectorization support: reference A_csc_values has unaligned access   [ olap_search.c(2053,5) ]
   remark #15389: vectorization support: reference C_IA1 has unaligned access   [ olap_search.c(2055,5) ]
   remark #15388: vectorization support: reference C_csc_values has aligned access   [ olap_search.c(2060,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.402
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 4 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 41 
   remark #15477: vector loop cost: 10.250 
   remark #15478: estimated potential speedup: 3.530 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(2047,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: csr_csr_krao(float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float **__restrict__, int **__restrict__, int **__restrict__, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(2194,11)
   remark #15389: vectorization support: reference C_IA1 has unaligned access
   remark #15389: vectorization support: reference A_IA1 has unaligned access
   remark #15389: vectorization support: reference C_csc_values has unaligned access   [ olap_search.c(2196,18) ]
   remark #15389: vectorization support: reference B_csc_values has unaligned access   [ olap_search.c(2196,18) ]
   remark #15389: vectorization support: reference A_csc_values has unaligned access   [ olap_search.c(2196,18) ]
   remark #15389: vectorization support: reference C_JA1 has unaligned access   [ olap_search.c(2197,11) ]
   remark #15389: vectorization support: reference B_JA1 has unaligned access   [ olap_search.c(2197,11) ]
   remark #15389: vectorization support: reference A_JA1 has unaligned access   [ olap_search.c(2197,11) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.397
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 5 
   remark #15451: unmasked unaligned unit stride stores: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 18 
   remark #15477: vector loop cost: 8.500 
   remark #15478: estimated potential speedup: 2.060 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(2194,11)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: csc_to_csr_and_csc_krao(float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float **__restrict__, int **__restrict__, int **__restrict__, float **__restrict__, int **__restrict__, int **__restrict__, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(2291,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(2291,3)
   remark #15388: vectorization support: reference C_csc_values has aligned access   [ olap_search.c(2292,7) ]
   remark #15389: vectorization support: reference B_csc_values has unaligned access   [ olap_search.c(2292,7) ]
   remark #15389: vectorization support: reference A_csc_values has unaligned access   [ olap_search.c(2292,7) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.889
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 9 
   remark #15477: vector loop cost: 2.250 
   remark #15478: estimated potential speedup: 3.760 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(2291,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(2295,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between C_JA1 line 2296 and C_JA1 line 2296
   remark #15346: vector dependence: assumed ANTI dependence between C_JA1 line 2296 and C_JA1 line 2296
LOOP END

LOOP BEGIN at olap_search.c(2295,3)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: csc_csc_krao(float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float **, int **, int **, int *, int *, int *)

    Report from: OpenMP optimizations [openmp]

OpenMP Construct at olap_search.c(2383,1)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at olap_search.c(2393,1)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at olap_search.c(2406,1)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at olap_search.c(2379,1)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(2384,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(2384,5)
   remark #15388: vectorization support: reference aux_col_ptr has aligned access   [ olap_search.c(2385,7) ]
   remark #15388: vectorization support: reference A_col_ptr has aligned access   [ olap_search.c(2385,7) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 0.750 
   remark #15478: estimated potential speedup: 7.030 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(2384,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(2394,5)
   remark #15389: vectorization support: reference A_col_ptr has unaligned access   [ olap_search.c(2395,25) ]
   remark #15389: vectorization support: reference B_col_ptr has unaligned access   [ olap_search.c(2397,7) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.085
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15458: masked indexed (or gather) loads: 2 
   remark #15459: masked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 15 
   remark #15477: vector loop cost: 17.750 
   remark #15478: estimated potential speedup: 0.840 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(2394,5)
<Remainder>
LOOP END

LOOP BEGIN at olap_search.c(2407,5)
   remark #15389: vectorization support: reference A_col_ptr has unaligned access   [ olap_search.c(2408,25) ]
   remark #15389: vectorization support: reference B_col_ptr has unaligned access   [ olap_search.c(2410,71) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.494
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15458: masked indexed (or gather) loads: 2 
   remark #15459: masked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 20 
   remark #15477: vector loop cost: 20.250 
   remark #15478: estimated potential speedup: 0.980 
   remark #15488: --- end vector loop cost summary ---
LOOP END
===========================================================================

Begin optimization report for: csr_kron(float *, int *, int *, int, int, int, float *, int *, int *, int, int, int, float **, int **, int **, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(2516,25)
   remark #15388: vectorization support: reference at_column_A.14659 has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 1.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(2516,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at olap_search.c(2518,21)
      remark #15389: vectorization support: reference C_IA1 has unaligned access
      remark #15389: vectorization support: reference B_IA1 has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.900
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 9 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 3.550 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at olap_search.c(2518,21)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at olap_search.c(2524,25)
   remark #15388: vectorization support: reference at_column_A.14663 has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 1.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(2524,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at olap_search.c(2526,28)
      remark #15389: vectorization support: reference C_csc_values has unaligned access
      remark #15389: vectorization support: reference B_csc_values has unaligned access
      remark #15389: vectorization support: reference A_csc_values has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.375
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 3.000 
      remark #15478: estimated potential speedup: 1.950 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at olap_search.c(2526,28)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at olap_search.c(2531,25)
   remark #15388: vectorization support: reference at_column_A.14667 has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 1.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(2531,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at olap_search.c(2533,21)
      remark #15389: vectorization support: reference C_JA1 has unaligned access
      remark #15389: vectorization support: reference B_JA1 has unaligned access
      remark #15389: vectorization support: reference A_JA1 has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.857
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 8 
      remark #15477: vector loop cost: 3.500 
      remark #15478: estimated potential speedup: 2.250 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at olap_search.c(2533,21)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: csc_csc_mm(float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float **, int **, int **, int *, int *, int *)

    Report from: Vector optimizations [vec]


<<<<<<< HEAD
LOOP BEGIN at olap_search.c(2347,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at olap_search.c(2353,7)
      remark #15388: vectorization support: reference A_col_ptr has aligned access   [ olap_search.c(2354,9) ]
      remark #15389: vectorization support: reference A_col_ptr has unaligned access   [ olap_search.c(2355,9) ]
=======
LOOP BEGIN at olap_search.c(2616,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at olap_search.c(2622,7)
      remark #15388: vectorization support: reference A_col_ptr has aligned access   [ olap_search.c(2623,9) ]
      remark #15389: vectorization support: reference A_col_ptr has unaligned access   [ olap_search.c(2624,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 7 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 2.800 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at olap_search.c(2622,7)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at olap_search.c(2622,7)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at olap_search.c(2622,7)
      remark #15388: vectorization support: reference A_col_ptr has aligned access   [ olap_search.c(2623,9) ]
      remark #15389: vectorization support: reference A_col_ptr has unaligned access   [ olap_search.c(2624,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.000
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 7 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 2.630 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at olap_search.c(2622,7)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: csc_csc_bitmap_mm(float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float **__restrict__, int **__restrict__, int **__restrict__, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(2683,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at olap_search.c(2689,7)
      remark #15388: vectorization support: reference A_col_ptr has aligned access   [ olap_search.c(2690,9) ]
      remark #15389: vectorization support: reference A_col_ptr has unaligned access   [ olap_search.c(2691,9) ]
>>>>>>> 2e2ce3950edc91d7f0717201d3d8bd712a20d3a2
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 7 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 2.800 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

<<<<<<< HEAD
   LOOP BEGIN at olap_search.c(2353,7)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at olap_search.c(2353,7)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at olap_search.c(2353,7)
      remark #15388: vectorization support: reference A_col_ptr has aligned access   [ olap_search.c(2354,9) ]
      remark #15389: vectorization support: reference A_col_ptr has unaligned access   [ olap_search.c(2355,9) ]
=======
   LOOP BEGIN at olap_search.c(2689,7)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at olap_search.c(2689,7)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at olap_search.c(2689,7)
      remark #15388: vectorization support: reference A_col_ptr has aligned access   [ olap_search.c(2690,9) ]
      remark #15389: vectorization support: reference A_col_ptr has unaligned access   [ olap_search.c(2691,9) ]
>>>>>>> 2e2ce3950edc91d7f0717201d3d8bd712a20d3a2
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.000
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 7 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 2.630 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

<<<<<<< HEAD
   LOOP BEGIN at olap_search.c(2353,7)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: csc_csc_bitmap_mm(float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float **__restrict__, int **__restrict__, int **__restrict__, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(2414,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at olap_search.c(2420,13)
      remark #15388: vectorization support: reference A_col_ptr has aligned access   [ olap_search.c(2421,17) ]
      remark #15389: vectorization support: reference A_col_ptr has unaligned access   [ olap_search.c(2422,17) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 7 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 2.800 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at olap_search.c(2420,13)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at olap_search.c(2420,13)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at olap_search.c(2420,13)
      remark #15388: vectorization support: reference A_col_ptr has aligned access   [ olap_search.c(2421,17) ]
      remark #15389: vectorization support: reference A_col_ptr has unaligned access   [ olap_search.c(2422,17) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.000
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 7 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 2.630 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at olap_search.c(2420,13)
=======
   LOOP BEGIN at olap_search.c(2689,7)
>>>>>>> 2e2ce3950edc91d7f0717201d3d8bd712a20d3a2
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: csc_bang(float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float **, int **, int *, int *)

    Report from: Vector optimizations [vec]


<<<<<<< HEAD
LOOP BEGIN at olap_search.c(2467,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between aux_row_ind line 2475 and aux_row_ind line 2480
   remark #15346: vector dependence: assumed FLOW dependence between aux_row_ind line 2480 and aux_row_ind line 2475

   LOOP BEGIN at olap_search.c(2474,7)
=======
LOOP BEGIN at olap_search.c(2736,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between aux_row_ind line 2744 and aux_row_ind line 2749
   remark #15346: vector dependence: assumed FLOW dependence between aux_row_ind line 2749 and aux_row_ind line 2744

   LOOP BEGIN at olap_search.c(2743,7)
>>>>>>> 2e2ce3950edc91d7f0717201d3d8bd712a20d3a2
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: produce_tuple_from_krao_csc(float *__restrict__, int *__restrict__, int, int, int, int)

    Report from: Vector optimizations [vec]


<<<<<<< HEAD
LOOP BEGIN at olap_search.c(2508,3)
   remark #15382: vectorization support: call to function g_quark_to_string(GQuark) cannot be vectorized   [ olap_search.c(2514,23) ]
   remark #15382: vectorization support: call to function g_quark_to_string(GQuark) cannot be vectorized   [ olap_search.c(2515,23) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(2516,5) ]
=======
LOOP BEGIN at olap_search.c(2777,3)
   remark #15382: vectorization support: call to function g_quark_to_string(GQuark) cannot be vectorized   [ olap_search.c(2783,23) ]
   remark #15382: vectorization support: call to function g_quark_to_string(GQuark) cannot be vectorized   [ olap_search.c(2784,23) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(2785,5) ]
>>>>>>> 2e2ce3950edc91d7f0717201d3d8bd712a20d3a2
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================
