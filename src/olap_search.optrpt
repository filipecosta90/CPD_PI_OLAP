Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


Begin optimization report for: getfield(char *, int, char *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(54,2)
   remark #15527: loop was not vectorized: function call to strtok(char *__restrict__, const char *__restrict__) cannot be vectorized   [ olap_search.c(55,19) ]
LOOP END
===========================================================================

Begin optimization report for: print_csc(float *, int *, int *, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(69,2)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(70,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(74,2)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(75,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(79,2)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(80,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: print_csr(float *, int *, int *, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(94,2)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(95,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(99,2)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(100,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(104,2)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(105,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: convert_and_write_to_csv(char *, float *, int *, int *, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(159,3)
   remark #15523: loop was not vectorized: loop control variable pos was found, but loop iteration count cannot be computed before executing the loop
LOOP END
===========================================================================

Begin optimization report for: read_from_mx(char *, float **, int **, int **, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(192,29)
   remark #15523: loop was not vectorized: loop control variable element_number was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at olap_search.c(226,2)
   remark #15523: loop was not vectorized: loop control variable pos was found, but loop iteration count cannot be computed before executing the loop
LOOP END
===========================================================================

Begin optimization report for: csr_hadamard(float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float **__restrict__, int **__restrict__, int **__restrict__, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(393,2)
   remark #15388: vectorization support: reference A_IA1 has aligned access   [ olap_search.c(395,17) ]
   remark #15388: vectorization support: reference B_IA1 has aligned access   [ olap_search.c(396,17) ]
   remark #15388: vectorization support: reference B_csc_values has aligned access   [ olap_search.c(399,3) ]
   remark #15388: vectorization support: reference A_csc_values has aligned access   [ olap_search.c(399,3) ]
   remark #15388: vectorization support: reference C_JA1 has aligned access   [ olap_search.c(400,3) ]
   remark #15388: vectorization support: reference C_IA1 has aligned access   [ olap_search.c(401,3) ]
   remark #15388: vectorization support: reference C_csc_values has aligned access   [ olap_search.c(406,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.212
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 4 
   remark #15449: unmasked aligned unit stride stores: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 45 
   remark #15477: vector loop cost: 8.250 
   remark #15478: estimated potential speedup: 5.430 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(393,2)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: csr_krao(float *, int *, int *, int, int, int, float *, int *, int *, int, int, int, float **, int **, int **, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(527,2)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at olap_search.c(527,2)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   LOOP END

   LOOP BEGIN at olap_search.c(527,2)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

LOOP BEGIN at olap_search.c(534,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between C_csc_values line 535 and B_csc_values line 535
   remark #15346: vector dependence: assumed ANTI dependence between B_csc_values line 535 and C_csc_values line 535
LOOP END

LOOP BEGIN at olap_search.c(540,2)
LOOP END

LOOP BEGIN at olap_search.c(534,2)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: csr_kron(float *, int *, int *, int, int, int, float *, int *, int *, int, int, int, float **, int **, int **, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(673,2)
   remark #15388: vectorization support: reference A_IA1 has aligned access   [ olap_search.c(675,4) ]
   remark #15388: vectorization support: reference A_csc_values has aligned access   [ olap_search.c(676,4) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.053
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 24 
   remark #15477: vector loop cost: 4.750 
   remark #15478: estimated potential speedup: 4.980 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at olap_search.c(674,3)
      remark #25460: No loop optimizations reported
   LOOP END
LOOP END

LOOP BEGIN at olap_search.c(673,2)
<Remainder loop for vectorization>

   LOOP BEGIN at olap_search.c(674,3)
      remark #25460: No loop optimizations reported
   LOOP END
LOOP END
===========================================================================
