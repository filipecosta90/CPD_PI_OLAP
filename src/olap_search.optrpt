Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


Begin optimization report for: getfield(char *, int, char *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(57,3)
   remark #15527: loop was not vectorized: function call to strtok(char *__restrict__, const char *__restrict__) cannot be vectorized   [ olap_search.c(58,21) ]
LOOP END
===========================================================================

Begin optimization report for: print_csc(float *, int *, int *, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(72,5)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(73,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(76,5)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(77,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(80,5)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(81,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: print_csc_vector(float *, int *, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(95,5)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(96,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(99,5)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(100,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: print_csr(float *, int *, int *, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(117,5)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(118,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(122,5)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(123,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(127,5)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(128,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: convert_and_write_to_csv(char *, float *, int *, int *, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(184,5)
   remark #15523: loop was not vectorized: loop control variable pos was found, but loop iteration count cannot be computed before executing the loop
LOOP END
===========================================================================

Begin optimization report for: read_from_mx(char *, float **, int **, int **, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(217,30)
   remark #15523: loop was not vectorized: loop control variable element_number was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at olap_search.c(251,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(251,3)
   remark #15389: vectorization support: reference coo_values has unaligned access   [ olap_search.c(252,5) ]
   remark #15389: vectorization support: reference aux_coo_values has unaligned access   [ olap_search.c(252,5) ]
   remark #15389: vectorization support: reference coo_columns has unaligned access   [ olap_search.c(253,5) ]
   remark #15389: vectorization support: reference aux_coo_columns has unaligned access   [ olap_search.c(253,5) ]
   remark #15388: vectorization support: reference coo_rows has aligned access   [ olap_search.c(254,5) ]
   remark #15389: vectorization support: reference aux_coo_rows has unaligned access   [ olap_search.c(254,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.926
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 6.750 
   remark #15478: estimated potential speedup: 2.430 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(251,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: tbl_read(char *, int, int *, int *, int *, float **, int **, int **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(337,30)
   remark #15523: loop was not vectorized: loop control variable element_number was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at olap_search.c(57,3) inlined into olap_search.c(340,13)
      remark #15527: loop was not vectorized: function call to strtok(char *__restrict__, const char *__restrict__) cannot be vectorized   [ olap_search.c(58,21) ]
   LOOP END
LOOP END

LOOP BEGIN at olap_search.c(420,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(420,5)
   remark #15388: vectorization support: reference A_IA has aligned access   [ olap_search.c(421,9) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 4.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 3 
   remark #15477: vector loop cost: 0.750 
   remark #15478: estimated potential speedup: 3.640 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(420,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(117,5) inlined into olap_search.c(430,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(118,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(122,5) inlined into olap_search.c(430,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(123,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(127,5) inlined into olap_search.c(430,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(128,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: tbl_get_number_elements(char *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(447,30)
   remark #15523: loop was not vectorized: loop control variable element_number was found, but loop iteration count cannot be computed before executing the loop
LOOP END
===========================================================================

Begin optimization report for: tbl_read_csc(char *, int, int, int *, int *, int *, float **, int **, int **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(493,30)
   remark #15523: loop was not vectorized: loop control variable element_number was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at olap_search.c(57,3) inlined into olap_search.c(498,13)
      remark #15527: loop was not vectorized: function call to strtok(char *__restrict__, const char *__restrict__) cannot be vectorized   [ olap_search.c(58,21) ]
   LOOP END
LOOP END

LOOP BEGIN at olap_search.c(72,5) inlined into olap_search.c(534,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(73,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(76,5) inlined into olap_search.c(534,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(77,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(80,5) inlined into olap_search.c(534,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(81,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: tbl_read_csc_measure(char *, int, int, int *, int *, int *, float **, int **, int **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(579,30)
   remark #15523: loop was not vectorized: loop control variable element_number was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at olap_search.c(57,3) inlined into olap_search.c(583,13)
      remark #15527: loop was not vectorized: function call to strtok(char *__restrict__, const char *__restrict__) cannot be vectorized   [ olap_search.c(58,21) ]
   LOOP END
LOOP END

LOOP BEGIN at olap_search.c(72,5) inlined into olap_search.c(607,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(73,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(76,5) inlined into olap_search.c(607,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(77,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(80,5) inlined into olap_search.c(607,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(81,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: tbl_read_measure(char *, int, int *, int *, int *, float **, int **, int **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(657,30)
   remark #15523: loop was not vectorized: loop control variable element_number was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at olap_search.c(57,3) inlined into olap_search.c(660,13)
      remark #15527: loop was not vectorized: function call to strtok(char *__restrict__, const char *__restrict__) cannot be vectorized   [ olap_search.c(58,21) ]
   LOOP END
LOOP END

LOOP BEGIN at olap_search.c(117,5) inlined into olap_search.c(717,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(118,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(122,5) inlined into olap_search.c(717,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(123,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(127,5) inlined into olap_search.c(717,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(128,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: tbl_read_filter(char *, int, int, char *, int *, int *, int *, float **, int **, int **, int **, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(750,30)
   remark #15523: loop was not vectorized: loop control variable element_number was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at olap_search.c(57,3) inlined into olap_search.c(754,13)
      remark #15527: loop was not vectorized: function call to strtok(char *__restrict__, const char *__restrict__) cannot be vectorized   [ olap_search.c(58,21) ]
   LOOP END
LOOP END

LOOP BEGIN at olap_search.c(813,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(813,3)
   remark #15389: vectorization support: reference coo_values has unaligned access   [ olap_search.c(814,5) ]
   remark #15389: vectorization support: reference aux_coo_values has unaligned access   [ olap_search.c(814,5) ]
   remark #15389: vectorization support: reference coo_columns has unaligned access   [ olap_search.c(815,5) ]
   remark #15388: vectorization support: reference coo_rows has aligned access   [ olap_search.c(816,5) ]
   remark #15389: vectorization support: reference aux_coo_rows has unaligned access   [ olap_search.c(816,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.605
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 14 
   remark #15477: vector loop cost: 4.750 
   remark #15478: estimated potential speedup: 2.820 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(813,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: tbl_read_filter_and(char *, int, int, char *, int, char *, int *, int *, int *, float **, int **, int **, int **, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(891,30)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at olap_search.c(57,3) inlined into olap_search.c(895,13)
      remark #15527: loop was not vectorized: function call to strtok(char *__restrict__, const char *__restrict__) cannot be vectorized   [ olap_search.c(58,21) ]
   LOOP END
LOOP END

LOOP BEGIN at olap_search.c(968,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(968,3)
   remark #15389: vectorization support: reference coo_values has unaligned access   [ olap_search.c(969,5) ]
   remark #15389: vectorization support: reference aux_coo_values has unaligned access   [ olap_search.c(969,5) ]
   remark #15389: vectorization support: reference coo_columns has unaligned access   [ olap_search.c(970,5) ]
   remark #15388: vectorization support: reference coo_rows has aligned access   [ olap_search.c(971,5) ]
   remark #15389: vectorization support: reference aux_coo_rows has unaligned access   [ olap_search.c(971,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.605
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 14 
   remark #15477: vector loop cost: 4.750 
   remark #15478: estimated potential speedup: 2.820 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(968,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: csr_csr_square_reshape(float **, int **, int **, int *, int *, int *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1050,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1050,3)
   remark #15389: vectorization support: reference new_csr_values has unaligned access   [ olap_search.c(1051,5) ]
   remark #15388: vectorization support: reference new_ja has aligned access   [ olap_search.c(1052,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.778
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 7 
   remark #15477: vector loop cost: 2.250 
   remark #15478: estimated potential speedup: 2.960 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1050,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1056,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1056,3)
   remark #15388: vectorization support: reference new_ia has aligned access   [ olap_search.c(1057,5) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 3.667
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 3 
   remark #15477: vector loop cost: 0.750 
   remark #15478: estimated potential speedup: 3.670 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1056,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: csc_csc_square_reshape(float **, int **, int **, int *, int *, int *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1116,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1116,3)
   remark #15389: vectorization support: reference A_csc_values has unaligned access   [ olap_search.c(1117,7) ]
   remark #15388: vectorization support: reference A_JA_csc has aligned access   [ olap_search.c(1118,7) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.778
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 7 
   remark #15477: vector loop cost: 2.250 
   remark #15478: estimated potential speedup: 2.960 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1116,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1122,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1122,3)
   remark #15388: vectorization support: reference A_IA_csc has aligned access   [ olap_search.c(1123,7) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 3.667
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 3 
   remark #15477: vector loop cost: 0.750 
   remark #15478: estimated potential speedup: 3.670 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1122,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: csc_to_csr_mx_selection_and(float *, int *, int *, int, int, int, int, char *, int, char *, float **, int **, int **, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1177,3)
   remark #15527: loop was not vectorized: function call to strcmp(const char *, const char *) cannot be vectorized   [ olap_search.c(1186,25) ]
LOOP END
===========================================================================

Begin optimization report for: csc_to_csc_mx_selection_and(float *, int *, int *, int, int, int, int, char *, int, char *, float **, int **, int **, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1278,3)
   remark #15382: vectorization support: call to function g_quark_to_string(GQuark) cannot be vectorized   [ olap_search.c(1285,21) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between A_row_ind line 1282 and C_col_ptr line 1312
   remark #15346: vector dependence: assumed FLOW dependence between C_col_ptr line 1312 and A_row_ind line 1282
LOOP END
===========================================================================

Begin optimization report for: csr_mx_selection_or(float *, int *, int *, int, int, int, int, char *, int, char *, float **, int **, int **, int *, int *, int *, int **, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1341,11)
   remark #15389: vectorization support: reference C_IA has unaligned access
   remark #15389: vectorization support: reference A_IA has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.118
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15459: masked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 12.750 
   remark #15478: estimated potential speedup: 0.390 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1341,11)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1342,11)
   remark #15389: vectorization support: reference C_JA has unaligned access
   remark #15389: vectorization support: reference A_JA has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.118
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15459: masked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 12.750 
   remark #15478: estimated potential speedup: 0.390 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1342,11)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1350,3)
   remark #15382: vectorization support: call to function g_quark_to_string(GQuark) cannot be vectorized   [ olap_search.c(1354,21) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between C_csr_values line 1382 and C_csr_values line 1382
   remark #15346: vector dependence: assumed OUTPUT dependence between C_csr_values line 1382 and C_csr_values line 1382
LOOP END
===========================================================================

Begin optimization report for: csr_mx_selection(float *, int *, int *, int, int, int, int, char *, float **, int **, int **, int *, int *, int *, int **, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1403,11)
   remark #15389: vectorization support: reference C_IA has unaligned access
   remark #15389: vectorization support: reference A_IA has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.118
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15459: masked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 12.750 
   remark #15478: estimated potential speedup: 0.390 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1403,11)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1404,11)
   remark #15389: vectorization support: reference C_JA has unaligned access
   remark #15389: vectorization support: reference A_JA has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.118
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15459: masked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 12.750 
   remark #15478: estimated potential speedup: 0.390 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1404,11)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1412,3)
   remark #15527: loop was not vectorized: function call to strcmp(const char *, const char *) cannot be vectorized   [ olap_search.c(1418,27) ]
LOOP END
===========================================================================

Begin optimization report for: csc_tbl_write(char *, float *, int *, int *, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1446,3)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(1452,7) ]
LOOP END
===========================================================================

Begin optimization report for: csr_tbl_write(char *, float *, int *, int *, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1507,3)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(1513,7) ]
LOOP END
===========================================================================

Begin optimization report for: csr_measure_tbl_write(char *, float *, int *, int *, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1568,3)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(1573,7) ]
LOOP END
===========================================================================

Begin optimization report for: csr_vector_write(char *, float *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1593,3)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(1599,9) ]
LOOP END
===========================================================================

Begin optimization report for: csr_measure_vector_write(char *, float *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1617,3)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(1619,7) ]
LOOP END
===========================================================================

Begin optimization report for: csr_hadamard(float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float **__restrict__, int **__restrict__, int **__restrict__, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1740,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1740,3)
   remark #15389: vectorization support: reference C_JA1 has unaligned access   [ olap_search.c(1747,5) ]
   remark #15389: vectorization support: reference A_IA1 has unaligned access   [ olap_search.c(1742,15) ]
   remark #15389: vectorization support: reference B_IA1 has unaligned access   [ olap_search.c(1743,15) ]
   remark #15389: vectorization support: reference B_csc_values has unaligned access   [ olap_search.c(1746,5) ]
   remark #15389: vectorization support: reference A_csc_values has unaligned access   [ olap_search.c(1746,5) ]
   remark #15389: vectorization support: reference C_IA1 has unaligned access   [ olap_search.c(1748,5) ]
   remark #15388: vectorization support: reference C_csc_values has aligned access   [ olap_search.c(1753,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.402
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 4 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 41 
   remark #15477: vector loop cost: 10.250 
   remark #15478: estimated potential speedup: 3.530 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1740,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: csr_csr_krao(float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float **__restrict__, int **__restrict__, int **__restrict__, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1887,11)
   remark #15389: vectorization support: reference C_IA1 has unaligned access
   remark #15389: vectorization support: reference A_IA1 has unaligned access
   remark #15389: vectorization support: reference C_csc_values has unaligned access   [ olap_search.c(1889,18) ]
   remark #15389: vectorization support: reference B_csc_values has unaligned access   [ olap_search.c(1889,18) ]
   remark #15389: vectorization support: reference A_csc_values has unaligned access   [ olap_search.c(1889,18) ]
   remark #15389: vectorization support: reference C_JA1 has unaligned access   [ olap_search.c(1890,11) ]
   remark #15389: vectorization support: reference B_JA1 has unaligned access   [ olap_search.c(1890,11) ]
   remark #15389: vectorization support: reference A_JA1 has unaligned access   [ olap_search.c(1890,11) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.397
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 5 
   remark #15451: unmasked unaligned unit stride stores: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 18 
   remark #15477: vector loop cost: 8.500 
   remark #15478: estimated potential speedup: 2.060 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1887,11)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: csc_to_csr_and_csc_krao(float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float **__restrict__, int **__restrict__, int **__restrict__, float **__restrict__, int **__restrict__, int **__restrict__, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1982,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1982,3)
   remark #15388: vectorization support: reference C_csc_values has aligned access   [ olap_search.c(1983,7) ]
   remark #15389: vectorization support: reference B_csc_values has unaligned access   [ olap_search.c(1983,7) ]
   remark #15389: vectorization support: reference A_csc_values has unaligned access   [ olap_search.c(1983,7) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.889
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 9 
   remark #15477: vector loop cost: 2.250 
   remark #15478: estimated potential speedup: 3.760 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1982,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1986,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between C_JA1 line 1987 and C_JA1 line 1987
   remark #15346: vector dependence: assumed ANTI dependence between C_JA1 line 1987 and C_JA1 line 1987
LOOP END

LOOP BEGIN at olap_search.c(1986,3)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: csc_csc_krao(float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float **, int **, int **, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(2062,3)
   remark #15388: vectorization support: reference aux_col_ptr has aligned access   [ olap_search.c(2063,5) ]
   remark #15389: vectorization support: reference A_col_ptr has unaligned access   [ olap_search.c(2063,5) ]
   remark #15388: vectorization support: reference aux_csc_values has aligned access   [ olap_search.c(2064,5) ]
   remark #15389: vectorization support: reference A_csc_values has unaligned access   [ olap_search.c(2064,5) ]
   remark #15389: vectorization support: reference B_csc_values has unaligned access   [ olap_search.c(2064,5) ]
   remark #15389: vectorization support: reference B_row_ind has unaligned access   [ olap_search.c(2067,5) ]
   remark #15389: vectorization support: reference A_row_ind has unaligned access   [ olap_search.c(2067,5) ]
   remark #15388: vectorization support: reference aux_row_ind has aligned access   [ olap_search.c(2068,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.485
   remark #15301: FUSED LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 3 
   remark #15450: unmasked unaligned unit stride loads: 5 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 30 
   remark #15477: vector loop cost: 8.250 
   remark #15478: estimated potential speedup: 3.560 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(2066,3)
LOOP END

LOOP BEGIN at olap_search.c(2062,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: csr_kron(float *, int *, int *, int, int, int, float *, int *, int *, int, int, int, float **, int **, int **, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(2171,25)
   remark #15388: vectorization support: reference at_column_A.14478 has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 1.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(2171,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at olap_search.c(2173,21)
      remark #15389: vectorization support: reference C_IA1 has unaligned access
      remark #15389: vectorization support: reference B_IA1 has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.900
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 9 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 3.550 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at olap_search.c(2173,21)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at olap_search.c(2179,25)
   remark #15388: vectorization support: reference at_column_A.14482 has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 1.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(2179,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at olap_search.c(2181,28)
      remark #15389: vectorization support: reference C_csc_values has unaligned access
      remark #15389: vectorization support: reference B_csc_values has unaligned access
      remark #15389: vectorization support: reference A_csc_values has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.375
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 3.000 
      remark #15478: estimated potential speedup: 1.950 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at olap_search.c(2181,28)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at olap_search.c(2186,25)
   remark #15388: vectorization support: reference at_column_A.14486 has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 1.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(2186,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at olap_search.c(2188,21)
      remark #15389: vectorization support: reference C_JA1 has unaligned access
      remark #15389: vectorization support: reference B_JA1 has unaligned access
      remark #15389: vectorization support: reference A_JA1 has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.857
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 8 
      remark #15477: vector loop cost: 3.500 
      remark #15478: estimated potential speedup: 2.250 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at olap_search.c(2188,21)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: csc_csc_mm(float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float **, int **, int **, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(2256,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at olap_search.c(2264,7)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at olap_search.c(2264,7)
      remark #15388: vectorization support: reference A_col_ptr has aligned access   [ olap_search.c(2265,48) ]
      remark #15389: vectorization support: reference A_col_ptr has unaligned access   [ olap_search.c(2265,48) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 7 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 4.160 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at olap_search.c(2264,7)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at olap_search.c(2264,7)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at olap_search.c(2264,7)
      remark #15388: vectorization support: reference A_col_ptr has aligned access   [ olap_search.c(2265,48) ]
      remark #15389: vectorization support: reference A_col_ptr has unaligned access   [ olap_search.c(2265,48) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 7 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 4.160 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at olap_search.c(2264,7)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: csc_bang(float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float **, int **, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(2310,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between aux_row_ind line 2316 and aux_row_ind line 2321
   remark #15346: vector dependence: assumed FLOW dependence between aux_row_ind line 2321 and aux_row_ind line 2316

   LOOP BEGIN at olap_search.c(2315,7)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: produce_tuple_from_krao_csc(float *__restrict__, int *__restrict__, int, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(2351,1)
   remark #15382: vectorization support: call to function g_quark_to_string(GQuark) cannot be vectorized   [ olap_search.c(2357,23) ]
   remark #15382: vectorization support: call to function g_quark_to_string(GQuark) cannot be vectorized   [ olap_search.c(2358,23) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(2359,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================
