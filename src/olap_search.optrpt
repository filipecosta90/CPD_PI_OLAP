Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


Begin optimization report for: getfield(char *, int, char *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(57,3)
   remark #15527: loop was not vectorized: function call to strtok(char *__restrict__, const char *__restrict__) cannot be vectorized   [ olap_search.c(58,21) ]
LOOP END
===========================================================================

Begin optimization report for: print_csc(float *, int *, int *, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(73,5)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(74,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(78,5)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(79,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(83,5)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(84,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: print_csr(float *, int *, int *, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(100,5)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(101,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(105,5)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(106,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(110,5)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(111,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: convert_and_write_to_csv(char *, float *, int *, int *, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(167,5)
   remark #15523: loop was not vectorized: loop control variable pos was found, but loop iteration count cannot be computed before executing the loop
LOOP END
===========================================================================

Begin optimization report for: read_from_mx(char *, float **, int **, int **, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(200,30)
   remark #15523: loop was not vectorized: loop control variable element_number was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at olap_search.c(236,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(236,3)
   remark #15389: vectorization support: reference coo_values has unaligned access   [ olap_search.c(237,5) ]
   remark #15389: vectorization support: reference aux_coo_values has unaligned access   [ olap_search.c(237,5) ]
   remark #15389: vectorization support: reference coo_columns has unaligned access   [ olap_search.c(238,5) ]
   remark #15389: vectorization support: reference aux_coo_columns has unaligned access   [ olap_search.c(238,5) ]
   remark #15388: vectorization support: reference coo_rows has aligned access   [ olap_search.c(239,5) ]
   remark #15389: vectorization support: reference aux_coo_rows has unaligned access   [ olap_search.c(239,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 20 
   remark #15477: vector loop cost: 5.500 
   remark #15478: estimated potential speedup: 3.460 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(236,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: tbl_read(char *, int, int *, int *, int *, float **, int **, int **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(322,30)
   remark #15523: loop was not vectorized: loop control variable element_number was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at olap_search.c(57,3) inlined into olap_search.c(325,13)
      remark #15527: loop was not vectorized: function call to strtok(char *__restrict__, const char *__restrict__) cannot be vectorized   [ olap_search.c(58,21) ]
   LOOP END
LOOP END

LOOP BEGIN at olap_search.c(405,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(405,5)
   remark #15388: vectorization support: reference A_IA has aligned access   [ olap_search.c(406,9) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 4.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 0.750 
   remark #15478: estimated potential speedup: 4.780 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(405,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(100,5) inlined into olap_search.c(415,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(101,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(105,5) inlined into olap_search.c(415,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(106,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(110,5) inlined into olap_search.c(415,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(111,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: tbl_get_number_elements(char *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(432,30)
   remark #15523: loop was not vectorized: loop control variable element_number was found, but loop iteration count cannot be computed before executing the loop
LOOP END
===========================================================================

Begin optimization report for: tbl_read_csc(char *, int, int, int *, int *, int *, float **, int **, int **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(478,30)
   remark #15523: loop was not vectorized: loop control variable element_number was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at olap_search.c(57,3) inlined into olap_search.c(483,13)
      remark #15527: loop was not vectorized: function call to strtok(char *__restrict__, const char *__restrict__) cannot be vectorized   [ olap_search.c(58,21) ]
   LOOP END
LOOP END

LOOP BEGIN at olap_search.c(73,5) inlined into olap_search.c(519,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(74,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(78,5) inlined into olap_search.c(519,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(79,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(83,5) inlined into olap_search.c(519,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(84,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: tbl_read_csc_measure(char *, int, int, int *, int *, int *, float **, int **, int **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(564,30)
   remark #15523: loop was not vectorized: loop control variable element_number was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at olap_search.c(57,3) inlined into olap_search.c(568,13)
      remark #15527: loop was not vectorized: function call to strtok(char *__restrict__, const char *__restrict__) cannot be vectorized   [ olap_search.c(58,21) ]
   LOOP END
LOOP END

LOOP BEGIN at olap_search.c(73,5) inlined into olap_search.c(592,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(74,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(78,5) inlined into olap_search.c(592,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(79,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(83,5) inlined into olap_search.c(592,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(84,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: tbl_read_measure(char *, int, int *, int *, int *, float **, int **, int **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(642,30)
   remark #15523: loop was not vectorized: loop control variable element_number was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at olap_search.c(57,3) inlined into olap_search.c(645,13)
      remark #15527: loop was not vectorized: function call to strtok(char *__restrict__, const char *__restrict__) cannot be vectorized   [ olap_search.c(58,21) ]
   LOOP END
LOOP END

LOOP BEGIN at olap_search.c(100,5) inlined into olap_search.c(702,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(101,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(105,5) inlined into olap_search.c(702,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(106,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(110,5) inlined into olap_search.c(702,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(111,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: tbl_read_filter(char *, int, int, char *, int *, int *, int *, float **, int **, int **, int **, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(735,30)
   remark #15523: loop was not vectorized: loop control variable element_number was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at olap_search.c(57,3) inlined into olap_search.c(739,13)
      remark #15527: loop was not vectorized: function call to strtok(char *__restrict__, const char *__restrict__) cannot be vectorized   [ olap_search.c(58,21) ]
   LOOP END
LOOP END

LOOP BEGIN at olap_search.c(798,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(798,3)
   remark #15389: vectorization support: reference coo_values has unaligned access   [ olap_search.c(799,5) ]
   remark #15389: vectorization support: reference aux_coo_values has unaligned access   [ olap_search.c(799,5) ]
   remark #15388: vectorization support: reference coo_columns has aligned access   [ olap_search.c(800,5) ]
   remark #15388: vectorization support: reference coo_rows has aligned access   [ olap_search.c(801,5) ]
   remark #15389: vectorization support: reference aux_coo_rows has unaligned access   [ olap_search.c(801,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.857
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 4.520 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(798,3)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at olap_search.c(798,3)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference coo_values has unaligned access   [ olap_search.c(799,5) ]
   remark #15389: vectorization support: reference aux_coo_values has unaligned access   [ olap_search.c(799,5) ]
   remark #15389: vectorization support: reference coo_columns has unaligned access   [ olap_search.c(800,5) ]
   remark #15388: vectorization support: reference coo_rows has aligned access   [ olap_search.c(801,5) ]
   remark #15389: vectorization support: reference aux_coo_rows has unaligned access   [ olap_search.c(801,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.852
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at olap_search.c(798,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: tbl_read_filter_and(char *, int, int, char *, int, char *, int *, int *, int *, float **, int **, int **, int **, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(876,30)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at olap_search.c(57,3) inlined into olap_search.c(880,13)
      remark #15527: loop was not vectorized: function call to strtok(char *__restrict__, const char *__restrict__) cannot be vectorized   [ olap_search.c(58,21) ]
   LOOP END
LOOP END

LOOP BEGIN at olap_search.c(953,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(953,3)
   remark #15389: vectorization support: reference coo_values has unaligned access   [ olap_search.c(954,5) ]
   remark #15389: vectorization support: reference aux_coo_values has unaligned access   [ olap_search.c(954,5) ]
   remark #15388: vectorization support: reference coo_columns has aligned access   [ olap_search.c(955,5) ]
   remark #15388: vectorization support: reference coo_rows has aligned access   [ olap_search.c(956,5) ]
   remark #15389: vectorization support: reference aux_coo_rows has unaligned access   [ olap_search.c(956,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.857
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 4.520 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(953,3)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at olap_search.c(953,3)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference coo_values has unaligned access   [ olap_search.c(954,5) ]
   remark #15389: vectorization support: reference aux_coo_values has unaligned access   [ olap_search.c(954,5) ]
   remark #15389: vectorization support: reference coo_columns has unaligned access   [ olap_search.c(955,5) ]
   remark #15388: vectorization support: reference coo_rows has aligned access   [ olap_search.c(956,5) ]
   remark #15389: vectorization support: reference aux_coo_rows has unaligned access   [ olap_search.c(956,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.852
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at olap_search.c(953,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: csr_csr_square_reshape(float **, int **, int **, int *, int *, int *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1035,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1035,3)
   remark #15388: vectorization support: reference new_csr_values has aligned access   [ olap_search.c(1036,5) ]
   remark #15388: vectorization support: reference new_ja has aligned access   [ olap_search.c(1037,5) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 1.250
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 1.500 
   remark #15478: estimated potential speedup: 4.880 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1035,3)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at olap_search.c(1035,3)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference new_csr_values has unaligned access   [ olap_search.c(1036,5) ]
   remark #15388: vectorization support: reference new_ja has aligned access   [ olap_search.c(1037,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.167
LOOP END

LOOP BEGIN at olap_search.c(1041,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1041,3)
   remark #15388: vectorization support: reference new_ia has aligned access   [ olap_search.c(1042,5) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 3.667
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 0.750 
   remark #15478: estimated potential speedup: 4.810 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1041,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: csc_csc_square_reshape(float **, int **, int **, int *, int *, int *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1101,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1101,3)
   remark #15388: vectorization support: reference A_csc_values has aligned access   [ olap_search.c(1102,7) ]
   remark #15388: vectorization support: reference A_JA_csc has aligned access   [ olap_search.c(1103,7) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 1.250
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 1.500 
   remark #15478: estimated potential speedup: 4.880 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1101,3)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at olap_search.c(1101,3)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference A_csc_values has unaligned access   [ olap_search.c(1102,7) ]
   remark #15388: vectorization support: reference A_JA_csc has aligned access   [ olap_search.c(1103,7) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.167
LOOP END

LOOP BEGIN at olap_search.c(1107,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1107,3)
   remark #15388: vectorization support: reference A_IA_csc has aligned access   [ olap_search.c(1108,7) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 3.667
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 0.750 
   remark #15478: estimated potential speedup: 4.810 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1107,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: csc_to_csr_mx_selection_and(float *, int *, int *, int, int, int, int, char *, int, char *, float **, int **, int **, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1162,3)
   remark #15527: loop was not vectorized: function call to strcmp(const char *, const char *) cannot be vectorized   [ olap_search.c(1171,25) ]
LOOP END
===========================================================================

Begin optimization report for: csc_to_csc_mx_selection_and(float *, int *, int *, int, int, int, int, char *, int, char *, float **, int **, int **, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1263,3)
   remark #15382: vectorization support: call to function g_quark_to_string(GQuark) cannot be vectorized   [ olap_search.c(1270,21) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between A_row_ind line 1267 and C_col_ptr line 1297
   remark #15346: vector dependence: assumed FLOW dependence between C_col_ptr line 1297 and A_row_ind line 1267
LOOP END
===========================================================================

Begin optimization report for: csr_mx_selection_or(float *, int *, int *, int, int, int, int, char *, int, char *, float **, int **, int **, int *, int *, int *, int **, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1326,11)
   remark #15389: vectorization support: reference C_IA has unaligned access
   remark #15389: vectorization support: reference A_IA has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.118
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15459: masked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 12.750 
   remark #15478: estimated potential speedup: 0.390 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1326,11)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1327,11)
   remark #15389: vectorization support: reference C_JA has unaligned access
   remark #15389: vectorization support: reference A_JA has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.118
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15459: masked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 12.750 
   remark #15478: estimated potential speedup: 0.390 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1327,11)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1335,3)
   remark #15382: vectorization support: call to function g_quark_to_string(GQuark) cannot be vectorized   [ olap_search.c(1339,21) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between C_csr_values line 1367 and C_csr_values line 1367
   remark #15346: vector dependence: assumed OUTPUT dependence between C_csr_values line 1367 and C_csr_values line 1367
LOOP END
===========================================================================

Begin optimization report for: csr_mx_selection(float *, int *, int *, int, int, int, int, char *, float **, int **, int **, int *, int *, int *, int **, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1388,11)
   remark #15389: vectorization support: reference C_IA has unaligned access
   remark #15389: vectorization support: reference A_IA has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.118
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15459: masked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 12.750 
   remark #15478: estimated potential speedup: 0.390 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1388,11)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1389,11)
   remark #15389: vectorization support: reference C_JA has unaligned access
   remark #15389: vectorization support: reference A_JA has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.118
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15459: masked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 12.750 
   remark #15478: estimated potential speedup: 0.390 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1389,11)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1397,3)
   remark #15527: loop was not vectorized: function call to strcmp(const char *, const char *) cannot be vectorized   [ olap_search.c(1403,27) ]
LOOP END
===========================================================================

Begin optimization report for: csc_tbl_write(char *, float *, int *, int *, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1431,3)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(1437,7) ]
LOOP END
===========================================================================

Begin optimization report for: csr_tbl_write(char *, float *, int *, int *, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1492,3)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(1498,7) ]
LOOP END
===========================================================================

Begin optimization report for: csr_measure_tbl_write(char *, float *, int *, int *, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1553,3)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(1558,7) ]
LOOP END
===========================================================================

Begin optimization report for: csr_vector_write(char *, float *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1578,3)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(1584,9) ]
LOOP END
===========================================================================

Begin optimization report for: csr_measure_vector_write(char *, float *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1602,3)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(1604,7) ]
LOOP END
===========================================================================

Begin optimization report for: csr_hadamard(float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float **__restrict__, int **__restrict__, int **__restrict__, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1725,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1725,3)
   remark #15389: vectorization support: reference C_JA1 has unaligned access   [ olap_search.c(1732,5) ]
   remark #15389: vectorization support: reference A_IA1 has unaligned access   [ olap_search.c(1727,15) ]
   remark #15389: vectorization support: reference B_IA1 has unaligned access   [ olap_search.c(1728,15) ]
   remark #15389: vectorization support: reference B_csc_values has unaligned access   [ olap_search.c(1731,5) ]
   remark #15389: vectorization support: reference A_csc_values has unaligned access   [ olap_search.c(1731,5) ]
   remark #15389: vectorization support: reference C_IA1 has unaligned access   [ olap_search.c(1733,5) ]
   remark #15388: vectorization support: reference C_csc_values has aligned access   [ olap_search.c(1738,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.727
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 4 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 44 
   remark #15477: vector loop cost: 11.000 
   remark #15478: estimated potential speedup: 3.810 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1725,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: csr_csr_krao(float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float **__restrict__, int **__restrict__, int **__restrict__, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1872,11)
   remark #15389: vectorization support: reference C_IA1 has unaligned access
   remark #15389: vectorization support: reference A_IA1 has unaligned access
   remark #15389: vectorization support: reference C_csc_values has unaligned access   [ olap_search.c(1874,18) ]
   remark #15389: vectorization support: reference B_csc_values has unaligned access   [ olap_search.c(1874,18) ]
   remark #15389: vectorization support: reference A_csc_values has unaligned access   [ olap_search.c(1874,18) ]
   remark #15389: vectorization support: reference C_JA1 has unaligned access   [ olap_search.c(1875,11) ]
   remark #15389: vectorization support: reference B_JA1 has unaligned access   [ olap_search.c(1875,11) ]
   remark #15389: vectorization support: reference A_JA1 has unaligned access   [ olap_search.c(1875,11) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.397
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 5 
   remark #15451: unmasked unaligned unit stride stores: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 18 
   remark #15477: vector loop cost: 8.500 
   remark #15478: estimated potential speedup: 2.060 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1872,11)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference C_IA1 has unaligned access
   remark #15389: vectorization support: reference A_IA1 has unaligned access
   remark #15389: vectorization support: reference C_csc_values has unaligned access   [ olap_search.c(1874,18) ]
   remark #15389: vectorization support: reference B_csc_values has unaligned access   [ olap_search.c(1874,18) ]
   remark #15389: vectorization support: reference A_csc_values has unaligned access   [ olap_search.c(1874,18) ]
   remark #15389: vectorization support: reference C_JA1 has unaligned access   [ olap_search.c(1875,11) ]
   remark #15389: vectorization support: reference B_JA1 has unaligned access   [ olap_search.c(1875,11) ]
   remark #15389: vectorization support: reference A_JA1 has unaligned access   [ olap_search.c(1875,11) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.740
LOOP END
===========================================================================

Begin optimization report for: csc_to_csr_and_csc_krao(float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float **__restrict__, int **__restrict__, int **__restrict__, float **__restrict__, int **__restrict__, int **__restrict__, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1967,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1967,3)
   remark #15388: vectorization support: reference C_csc_values has aligned access   [ olap_search.c(1968,7) ]
   remark #15389: vectorization support: reference B_csc_values has unaligned access   [ olap_search.c(1968,7) ]
   remark #15388: vectorization support: reference A_csc_values has aligned access   [ olap_search.c(1968,7) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 1.214
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 11 
   remark #15477: vector loop cost: 1.750 
   remark #15478: estimated potential speedup: 5.690 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1967,3)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at olap_search.c(1967,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference C_csc_values has aligned access   [ olap_search.c(1968,7) ]
   remark #15389: vectorization support: reference B_csc_values has unaligned access   [ olap_search.c(1968,7) ]
   remark #15389: vectorization support: reference A_csc_values has unaligned access   [ olap_search.c(1968,7) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.143
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at olap_search.c(1967,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1971,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between C_JA1 line 1972 and C_JA1 line 1972
   remark #15346: vector dependence: assumed ANTI dependence between C_JA1 line 1972 and C_JA1 line 1972
LOOP END

LOOP BEGIN at olap_search.c(1971,3)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: csc_csc_krao(float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float **, int **, int **, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(2047,3)
   remark #15388: vectorization support: reference aux_col_ptr has aligned access   [ olap_search.c(2048,5) ]
   remark #15389: vectorization support: reference A_col_ptr has unaligned access   [ olap_search.c(2048,5) ]
   remark #15388: vectorization support: reference aux_csc_values has aligned access   [ olap_search.c(2049,5) ]
   remark #15389: vectorization support: reference A_csc_values has unaligned access   [ olap_search.c(2049,5) ]
   remark #15389: vectorization support: reference B_csc_values has unaligned access   [ olap_search.c(2049,5) ]
   remark #15389: vectorization support: reference B_row_ind has unaligned access   [ olap_search.c(2053,5) ]
   remark #15389: vectorization support: reference A_row_ind has unaligned access   [ olap_search.c(2053,5) ]
   remark #15388: vectorization support: reference aux_row_ind has aligned access   [ olap_search.c(2054,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.441
   remark #15301: FUSED LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 3 
   remark #15450: unmasked unaligned unit stride loads: 5 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 33 
   remark #15477: vector loop cost: 8.500 
   remark #15478: estimated potential speedup: 3.800 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(2052,3)
LOOP END

LOOP BEGIN at olap_search.c(2047,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: csr_kron(float *, int *, int *, int, int, int, float *, int *, int *, int, int, int, float **, int **, int **, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(2158,25)
   remark #15388: vectorization support: reference at_column_A.14468 has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 1.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(2158,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at olap_search.c(2160,21)
      remark #15389: vectorization support: reference C_IA1 has unaligned access
      remark #15389: vectorization support: reference B_IA1 has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.900
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 9 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 3.550 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at olap_search.c(2160,21)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at olap_search.c(2166,25)
   remark #15388: vectorization support: reference at_column_A.14472 has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 1.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(2166,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at olap_search.c(2168,28)
      remark #15389: vectorization support: reference C_csc_values has unaligned access
      remark #15389: vectorization support: reference B_csc_values has unaligned access
      remark #15389: vectorization support: reference A_csc_values has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.450
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 2.320 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at olap_search.c(2168,28)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at olap_search.c(2173,25)
   remark #15388: vectorization support: reference at_column_A.14476 has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 1.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(2173,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at olap_search.c(2175,21)
      remark #15389: vectorization support: reference C_JA1 has unaligned access
      remark #15389: vectorization support: reference B_JA1 has unaligned access
      remark #15389: vectorization support: reference A_JA1 has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.750
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 8 
      remark #15477: vector loop cost: 4.000 
      remark #15478: estimated potential speedup: 1.980 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at olap_search.c(2175,21)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: csc_csc_mm(float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float **, int **, int **, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(2243,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at olap_search.c(2251,1)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at olap_search.c(2251,1)
      remark #15388: vectorization support: reference A_col_ptr has aligned access   [ olap_search.c(2252,41) ]
      remark #15389: vectorization support: reference A_col_ptr has unaligned access   [ olap_search.c(2252,41) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.429
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 8 
      remark #15477: vector loop cost: 1.750 
      remark #15478: estimated potential speedup: 4.280 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at olap_search.c(2251,1)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at olap_search.c(2251,1)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at olap_search.c(2251,1)
      remark #15388: vectorization support: reference A_col_ptr has aligned access   [ olap_search.c(2252,41) ]
      remark #15389: vectorization support: reference A_col_ptr has unaligned access   [ olap_search.c(2252,41) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.429
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 8 
      remark #15477: vector loop cost: 1.750 
      remark #15478: estimated potential speedup: 4.280 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at olap_search.c(2251,1)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================
