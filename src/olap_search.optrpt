Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


Begin optimization report for: getfield(char *, int, char *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(57,2)
   remark #15527: loop was not vectorized: function call to strtok(char *__restrict__, const char *__restrict__) cannot be vectorized   [ olap_search.c(58,19) ]
LOOP END
===========================================================================

Begin optimization report for: print_csc(float *, int *, int *, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(73,2)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(74,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(78,2)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(79,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(83,2)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(84,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: print_csr(float *, int *, int *, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(100,2)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(101,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(105,2)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(106,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(110,2)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(111,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: convert_and_write_to_csv(char *, float *, int *, int *, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(167,3)
   remark #15523: loop was not vectorized: loop control variable pos was found, but loop iteration count cannot be computed before executing the loop
LOOP END
===========================================================================

Begin optimization report for: read_from_mx(char *, float **, int **, int **, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(200,29)
   remark #15523: loop was not vectorized: loop control variable element_number was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at olap_search.c(236,2)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(236,2)
   remark #15389: vectorization support: reference coo_values has unaligned access   [ olap_search.c(237,3) ]
   remark #15389: vectorization support: reference aux_coo_values has unaligned access   [ olap_search.c(237,3) ]
   remark #15389: vectorization support: reference coo_columns has unaligned access   [ olap_search.c(238,3) ]
   remark #15389: vectorization support: reference aux_coo_columns has unaligned access   [ olap_search.c(238,3) ]
   remark #15388: vectorization support: reference coo_rows has aligned access   [ olap_search.c(239,3) ]
   remark #15389: vectorization support: reference aux_coo_rows has unaligned access   [ olap_search.c(239,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 20 
   remark #15477: vector loop cost: 5.500 
   remark #15478: estimated potential speedup: 3.460 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(236,2)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: tbl_read(char *, int, int *, int *, int *, float **, int **, int **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(322,29)
   remark #15523: loop was not vectorized: loop control variable element_number was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at olap_search.c(57,2) inlined into olap_search.c(325,11)
      remark #15527: loop was not vectorized: function call to strtok(char *__restrict__, const char *__restrict__) cannot be vectorized   [ olap_search.c(58,19) ]
   LOOP END
LOOP END

LOOP BEGIN at olap_search.c(406,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(406,3)
   remark #15388: vectorization support: reference A_IA has aligned access   [ olap_search.c(407,5) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 4.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 0.750 
   remark #15478: estimated potential speedup: 4.780 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(406,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(100,2) inlined into olap_search.c(416,2)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(101,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(105,2) inlined into olap_search.c(416,2)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(106,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(110,2) inlined into olap_search.c(416,2)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(111,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: tbl_read_measure(char *, int, int *, int *, int *, float **, int **, int **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(464,29)
   remark #15523: loop was not vectorized: loop control variable element_number was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at olap_search.c(57,2) inlined into olap_search.c(467,11)
      remark #15527: loop was not vectorized: function call to strtok(char *__restrict__, const char *__restrict__) cannot be vectorized   [ olap_search.c(58,19) ]
   LOOP END
LOOP END

LOOP BEGIN at olap_search.c(100,2) inlined into olap_search.c(524,2)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(101,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(105,2) inlined into olap_search.c(524,2)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(106,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap_search.c(110,2) inlined into olap_search.c(524,2)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(111,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: tbl_read_filter(char *, int, int, char *, int *, int *, int *, float **, int **, int **, int **, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(557,29)
   remark #15523: loop was not vectorized: loop control variable element_number was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at olap_search.c(57,2) inlined into olap_search.c(561,11)
      remark #15527: loop was not vectorized: function call to strtok(char *__restrict__, const char *__restrict__) cannot be vectorized   [ olap_search.c(58,19) ]
   LOOP END
LOOP END

LOOP BEGIN at olap_search.c(620,2)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(620,2)
   remark #15389: vectorization support: reference coo_values has unaligned access   [ olap_search.c(621,3) ]
   remark #15389: vectorization support: reference aux_coo_values has unaligned access   [ olap_search.c(621,3) ]
   remark #15388: vectorization support: reference coo_columns has aligned access   [ olap_search.c(622,3) ]
   remark #15388: vectorization support: reference coo_rows has aligned access   [ olap_search.c(623,3) ]
   remark #15389: vectorization support: reference aux_coo_rows has unaligned access   [ olap_search.c(623,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.857
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 4.520 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(620,2)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at olap_search.c(620,2)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference coo_values has unaligned access   [ olap_search.c(621,3) ]
   remark #15389: vectorization support: reference aux_coo_values has unaligned access   [ olap_search.c(621,3) ]
   remark #15389: vectorization support: reference coo_columns has unaligned access   [ olap_search.c(622,3) ]
   remark #15388: vectorization support: reference coo_rows has aligned access   [ olap_search.c(623,3) ]
   remark #15389: vectorization support: reference aux_coo_rows has unaligned access   [ olap_search.c(623,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.852
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at olap_search.c(620,2)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: tbl_read_filter_and(char *, int, int, char *, int, char *, int *, int *, int *, float **, int **, int **, int **, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(698,29)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at olap_search.c(57,2) inlined into olap_search.c(702,11)
      remark #15527: loop was not vectorized: function call to strtok(char *__restrict__, const char *__restrict__) cannot be vectorized   [ olap_search.c(58,19) ]
   LOOP END
LOOP END

LOOP BEGIN at olap_search.c(775,2)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(775,2)
   remark #15389: vectorization support: reference coo_values has unaligned access   [ olap_search.c(776,3) ]
   remark #15389: vectorization support: reference aux_coo_values has unaligned access   [ olap_search.c(776,3) ]
   remark #15388: vectorization support: reference coo_columns has aligned access   [ olap_search.c(777,3) ]
   remark #15388: vectorization support: reference coo_rows has aligned access   [ olap_search.c(778,3) ]
   remark #15389: vectorization support: reference aux_coo_rows has unaligned access   [ olap_search.c(778,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.857
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 4.520 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(775,2)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at olap_search.c(775,2)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference coo_values has unaligned access   [ olap_search.c(776,3) ]
   remark #15389: vectorization support: reference aux_coo_values has unaligned access   [ olap_search.c(776,3) ]
   remark #15389: vectorization support: reference coo_columns has unaligned access   [ olap_search.c(777,3) ]
   remark #15388: vectorization support: reference coo_rows has aligned access   [ olap_search.c(778,3) ]
   remark #15389: vectorization support: reference aux_coo_rows has unaligned access   [ olap_search.c(778,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.852
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at olap_search.c(775,2)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: csr_csr_square_reshape(float **, int **, int **, int *, int *, int *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(857,2)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(857,2)
   remark #15388: vectorization support: reference new_csr_values has aligned access   [ olap_search.c(858,3) ]
   remark #15388: vectorization support: reference new_ja has aligned access   [ olap_search.c(859,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 1.250
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 1.500 
   remark #15478: estimated potential speedup: 4.880 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(857,2)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at olap_search.c(857,2)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference new_csr_values has unaligned access   [ olap_search.c(858,3) ]
   remark #15388: vectorization support: reference new_ja has aligned access   [ olap_search.c(859,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.167
LOOP END

LOOP BEGIN at olap_search.c(863,2)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(863,2)
   remark #15388: vectorization support: reference new_ia has aligned access   [ olap_search.c(864,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 3.667
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 0.750 
   remark #15478: estimated potential speedup: 4.810 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(863,2)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: csc_csc_square_reshape(float **, int **, int **, int *, int *, int *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(923,2)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(923,2)
   remark #15388: vectorization support: reference A_csc_values has aligned access   [ olap_search.c(924,5) ]
   remark #15388: vectorization support: reference A_JA_csc has aligned access   [ olap_search.c(925,5) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 1.250
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 1.500 
   remark #15478: estimated potential speedup: 4.880 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(923,2)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at olap_search.c(923,2)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference A_csc_values has unaligned access   [ olap_search.c(924,5) ]
   remark #15388: vectorization support: reference A_JA_csc has aligned access   [ olap_search.c(925,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.167
LOOP END

LOOP BEGIN at olap_search.c(929,2)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(929,2)
   remark #15388: vectorization support: reference A_IA_csc has aligned access   [ olap_search.c(930,5) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 3.667
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 0.750 
   remark #15478: estimated potential speedup: 4.810 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(929,2)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: csc_to_csr_mx_selection_and(float *, int *, int *, int, int, int, int, char *, int, char *, float **, int **, int **, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(984,2)
   remark #15527: loop was not vectorized: function call to strcmp(const char *, const char *) cannot be vectorized   [ olap_search.c(993,22) ]
LOOP END
===========================================================================

Begin optimization report for: csc_to_csc_mx_selection_and(float *, int *, int *, int, int, int, int, char *, int, char *, float **, int **, int **, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1082,2)
   remark #15382: vectorization support: call to function g_quark_to_string(GQuark) cannot be vectorized   [ olap_search.c(1089,19) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between A_JA1 line 1086 and C_IA1 line 1115
   remark #15346: vector dependence: assumed FLOW dependence between C_IA1 line 1115 and A_JA1 line 1086
LOOP END
===========================================================================

Begin optimization report for: csr_mx_selection_or(float *, int *, int *, int, int, int, int, char *, int, char *, float **, int **, int **, int *, int *, int *, int **, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1144,10)
   remark #15389: vectorization support: reference C_IA has unaligned access
   remark #15389: vectorization support: reference A_IA has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.118
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15459: masked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 12.750 
   remark #15478: estimated potential speedup: 0.390 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1144,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1145,10)
   remark #15389: vectorization support: reference C_JA has unaligned access
   remark #15389: vectorization support: reference A_JA has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.118
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15459: masked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 12.750 
   remark #15478: estimated potential speedup: 0.390 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1145,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1153,2)
   remark #15382: vectorization support: call to function g_quark_to_string(GQuark) cannot be vectorized   [ olap_search.c(1157,19) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between C_csr_values line 1185 and C_csr_values line 1185
   remark #15346: vector dependence: assumed OUTPUT dependence between C_csr_values line 1185 and C_csr_values line 1185
LOOP END
===========================================================================

Begin optimization report for: csr_mx_selection(float *, int *, int *, int, int, int, int, char *, float **, int **, int **, int *, int *, int *, int **, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1206,10)
   remark #15389: vectorization support: reference C_IA has unaligned access
   remark #15389: vectorization support: reference A_IA has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.118
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15459: masked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 12.750 
   remark #15478: estimated potential speedup: 0.390 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1206,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1207,10)
   remark #15389: vectorization support: reference C_JA has unaligned access
   remark #15389: vectorization support: reference A_JA has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.118
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15459: masked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 12.750 
   remark #15478: estimated potential speedup: 0.390 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1207,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1215,2)
   remark #15527: loop was not vectorized: function call to strcmp(const char *, const char *) cannot be vectorized   [ olap_search.c(1221,29) ]
LOOP END
===========================================================================

Begin optimization report for: csc_tbl_write(char *, float *, int *, int *, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1249,2)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(1255,4) ]
LOOP END
===========================================================================

Begin optimization report for: csr_tbl_write(char *, float *, int *, int *, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1310,2)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(1316,4) ]
LOOP END
===========================================================================

Begin optimization report for: csr_measure_tbl_write(char *, float *, int *, int *, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1371,2)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(1376,4) ]
LOOP END
===========================================================================

Begin optimization report for: csr_vector_write(char *, float *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1396,2)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(1402,5) ]
LOOP END
===========================================================================

Begin optimization report for: csr_measure_vector_write(char *, float *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1420,2)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ olap_search.c(1422,4) ]
LOOP END
===========================================================================

Begin optimization report for: csr_hadamard(float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float **__restrict__, int **__restrict__, int **__restrict__, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1543,2)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1543,2)
   remark #15389: vectorization support: reference C_JA1 has unaligned access   [ olap_search.c(1550,3) ]
   remark #15389: vectorization support: reference A_IA1 has unaligned access   [ olap_search.c(1545,17) ]
   remark #15389: vectorization support: reference B_IA1 has unaligned access   [ olap_search.c(1546,17) ]
   remark #15389: vectorization support: reference B_csc_values has unaligned access   [ olap_search.c(1549,3) ]
   remark #15389: vectorization support: reference A_csc_values has unaligned access   [ olap_search.c(1549,3) ]
   remark #15389: vectorization support: reference C_IA1 has unaligned access   [ olap_search.c(1551,3) ]
   remark #15388: vectorization support: reference C_csc_values has aligned access   [ olap_search.c(1556,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.727
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 4 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 44 
   remark #15477: vector loop cost: 11.000 
   remark #15478: estimated potential speedup: 3.810 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1543,2)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: csr_csr_krao(float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float **__restrict__, int **__restrict__, int **__restrict__, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1690,10)
   remark #15389: vectorization support: reference C_IA1 has unaligned access
   remark #15389: vectorization support: reference A_IA1 has unaligned access
   remark #15389: vectorization support: reference C_csc_values has unaligned access   [ olap_search.c(1692,17) ]
   remark #15389: vectorization support: reference B_csc_values has unaligned access   [ olap_search.c(1692,17) ]
   remark #15389: vectorization support: reference A_csc_values has unaligned access   [ olap_search.c(1692,17) ]
   remark #15389: vectorization support: reference C_JA1 has unaligned access   [ olap_search.c(1693,10) ]
   remark #15389: vectorization support: reference B_JA1 has unaligned access   [ olap_search.c(1693,10) ]
   remark #15389: vectorization support: reference A_JA1 has unaligned access   [ olap_search.c(1693,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.397
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 5 
   remark #15451: unmasked unaligned unit stride stores: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 18 
   remark #15477: vector loop cost: 8.500 
   remark #15478: estimated potential speedup: 2.060 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1690,10)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference C_IA1 has unaligned access
   remark #15389: vectorization support: reference A_IA1 has unaligned access
   remark #15389: vectorization support: reference C_csc_values has unaligned access   [ olap_search.c(1692,17) ]
   remark #15389: vectorization support: reference B_csc_values has unaligned access   [ olap_search.c(1692,17) ]
   remark #15389: vectorization support: reference A_csc_values has unaligned access   [ olap_search.c(1692,17) ]
   remark #15389: vectorization support: reference C_JA1 has unaligned access   [ olap_search.c(1693,10) ]
   remark #15389: vectorization support: reference B_JA1 has unaligned access   [ olap_search.c(1693,10) ]
   remark #15389: vectorization support: reference A_JA1 has unaligned access   [ olap_search.c(1693,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.740
LOOP END
===========================================================================

Begin optimization report for: csc_to_csr_and_csc_krao(float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float **__restrict__, int **__restrict__, int **__restrict__, float **__restrict__, int **__restrict__, int **__restrict__, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1785,2)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1785,2)
   remark #15388: vectorization support: reference C_csc_values has aligned access   [ olap_search.c(1786,5) ]
   remark #15389: vectorization support: reference B_csc_values has unaligned access   [ olap_search.c(1786,5) ]
   remark #15388: vectorization support: reference A_csc_values has aligned access   [ olap_search.c(1786,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 1.214
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 11 
   remark #15477: vector loop cost: 1.750 
   remark #15478: estimated potential speedup: 5.690 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1785,2)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at olap_search.c(1785,2)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference C_csc_values has aligned access   [ olap_search.c(1786,5) ]
   remark #15389: vectorization support: reference B_csc_values has unaligned access   [ olap_search.c(1786,5) ]
   remark #15389: vectorization support: reference A_csc_values has unaligned access   [ olap_search.c(1786,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.143
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at olap_search.c(1785,2)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1789,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between C_JA1 line 1790 and C_JA1 line 1790
   remark #15346: vector dependence: assumed ANTI dependence between C_JA1 line 1790 and C_JA1 line 1790
LOOP END

LOOP BEGIN at olap_search.c(1789,2)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: csc_csc_krao(float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float **__restrict__, int **__restrict__, int **__restrict__, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1873,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between C_IA1 line 1874 and C_IA1 line 1874
   remark #15346: vector dependence: assumed ANTI dependence between C_IA1 line 1874 and C_IA1 line 1874
LOOP END

LOOP BEGIN at olap_search.c(1873,2)
<Remainder>
LOOP END

LOOP BEGIN at olap_search.c(1877,2)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1877,2)
   remark #15388: vectorization support: reference C_csc_values has aligned access   [ olap_search.c(1878,5) ]
   remark #15389: vectorization support: reference B_csc_values has unaligned access   [ olap_search.c(1878,5) ]
   remark #15388: vectorization support: reference A_csc_values has aligned access   [ olap_search.c(1878,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 1.214
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 11 
   remark #15477: vector loop cost: 1.750 
   remark #15478: estimated potential speedup: 5.690 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1877,2)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at olap_search.c(1877,2)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference C_csc_values has aligned access   [ olap_search.c(1878,5) ]
   remark #15389: vectorization support: reference B_csc_values has unaligned access   [ olap_search.c(1878,5) ]
   remark #15389: vectorization support: reference A_csc_values has unaligned access   [ olap_search.c(1878,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.143
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at olap_search.c(1877,2)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at olap_search.c(1881,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between C_JA1 line 1882 and C_JA1 line 1882
   remark #15346: vector dependence: assumed ANTI dependence between C_JA1 line 1882 and C_JA1 line 1882
LOOP END

LOOP BEGIN at olap_search.c(1881,2)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: csr_kron(float *, int *, int *, int, int, int, float *, int *, int *, int, int, int, float **, int **, int **, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap_search.c(1980,28)
   remark #15388: vectorization support: reference at_column_A.14454 has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 1.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1980,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at olap_search.c(1982,19)
      remark #15389: vectorization support: reference C_IA1 has unaligned access
      remark #15389: vectorization support: reference B_IA1 has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.900
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 9 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 3.550 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at olap_search.c(1982,19)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at olap_search.c(1988,28)
   remark #15388: vectorization support: reference at_column_A.14458 has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 1.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1988,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at olap_search.c(1990,26)
      remark #15389: vectorization support: reference C_csc_values has unaligned access
      remark #15389: vectorization support: reference B_csc_values has unaligned access
      remark #15389: vectorization support: reference A_csc_values has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.450
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 2.320 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at olap_search.c(1990,26)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at olap_search.c(1995,28)
   remark #15388: vectorization support: reference at_column_A.14462 has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 1.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap_search.c(1995,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at olap_search.c(1997,19)
      remark #15389: vectorization support: reference C_JA1 has unaligned access
      remark #15389: vectorization support: reference B_JA1 has unaligned access
      remark #15389: vectorization support: reference A_JA1 has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.750
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 8 
      remark #15477: vector loop cost: 4.000 
      remark #15478: estimated potential speedup: 1.980 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at olap_search.c(1997,19)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================
