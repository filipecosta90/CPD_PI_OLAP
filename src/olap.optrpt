Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


Begin optimization report for: getfield(char *, int, char *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap.c(55,3)
   remark #15527: loop was not vectorized: function call to strtok(char *, const char *) cannot be vectorized   [ olap.c(56,21) ]
LOOP END
===========================================================================

Begin optimization report for: print_csc(float *, int *, int *, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap.c(70,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap.c(71,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap.c(75,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap.c(76,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap.c(80,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap.c(81,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: print_csr(float *, int *, int *, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap.c(95,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap.c(96,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap.c(100,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap.c(101,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at olap.c(105,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ olap.c(106,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: tbl_read(char *, int, int *, int *, int *, float **, int **, int **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap.c(153,30)
   remark #15523: loop was not vectorized: loop control variable element_number was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at olap.c(55,3) inlined into olap.c(156,13)
      remark #15527: loop was not vectorized: function call to strtok(char *, const char *) cannot be vectorized   [ olap.c(56,21) ]
   LOOP END
LOOP END

LOOP BEGIN at olap.c(195,3)
   remark #15523: loop was not vectorized: loop control variable pos was found, but loop iteration count cannot be computed before executing the loop
LOOP END
===========================================================================

Begin optimization report for: tbl_read_measure(char *, int, int *, int *, int *, float **, int **, int **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap.c(274,30)
   remark #15523: loop was not vectorized: loop control variable element_number was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at olap.c(55,3) inlined into olap.c(277,13)
      remark #15527: loop was not vectorized: function call to strtok(char *, const char *) cannot be vectorized   [ olap.c(56,21) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: tbl_read_filter(char *, int, int, char *, int *, int *, int *, float **, int **, int **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap.c(359,30)
   remark #15523: loop was not vectorized: loop control variable element_number was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at olap.c(55,3) inlined into olap.c(363,13)
      remark #15527: loop was not vectorized: function call to strtok(char *, const char *) cannot be vectorized   [ olap.c(56,21) ]
   LOOP END
LOOP END

LOOP BEGIN at olap.c(422,3)
   remark #15523: loop was not vectorized: loop control variable pos was found, but loop iteration count cannot be computed before executing the loop
LOOP END
===========================================================================

Begin optimization report for: tbl_read_filter_and(char *, int, int, char *, int, char *, int *, int *, int *, float **, int **, int **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap.c(497,30)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at olap.c(55,3) inlined into olap.c(501,13)
      remark #15527: loop was not vectorized: function call to strtok(char *, const char *) cannot be vectorized   [ olap.c(56,21) ]
   LOOP END
LOOP END

LOOP BEGIN at olap.c(573,3)
   remark #15523: loop was not vectorized: loop control variable pos was found, but loop iteration count cannot be computed before executing the loop
LOOP END
===========================================================================

Begin optimization report for: tbl_write(char *, int, int, int, float *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap.c(678,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at olap.c(678,3)
   remark #15388: vectorization support: reference A_IA1 has aligned access   [ olap.c(679,5) ]
   remark #15389: vectorization support: reference A_IA1 has unaligned access   [ olap.c(680,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.714
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 7 
   remark #15477: vector loop cost: 1.750 
   remark #15478: estimated potential speedup: 3.760 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap.c(678,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: csr_hadamard(float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float **__restrict__, int **__restrict__, int **__restrict__, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap.c(783,3)
   remark #15388: vectorization support: reference A_IA1 has aligned access   [ olap.c(785,19) ]
   remark #15388: vectorization support: reference B_IA1 has aligned access   [ olap.c(786,19) ]
   remark #15388: vectorization support: reference B_csc_values has aligned access   [ olap.c(789,5) ]
   remark #15388: vectorization support: reference A_csc_values has aligned access   [ olap.c(789,5) ]
   remark #15388: vectorization support: reference C_JA1 has aligned access   [ olap.c(790,5) ]
   remark #15388: vectorization support: reference C_IA1 has aligned access   [ olap.c(791,5) ]
   remark #15388: vectorization support: reference C_csc_values has aligned access   [ olap.c(796,5) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.212
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 4 
   remark #15449: unmasked aligned unit stride stores: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 45 
   remark #15477: vector loop cost: 8.250 
   remark #15478: estimated potential speedup: 5.430 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap.c(783,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: csr_krao(float *, int *, int *, int, int, int, float *, int *, int *, int, int, int, float **, int **, int **, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap.c(919,3)
   remark #15388: vectorization support: reference C_IA1 has aligned access   [ olap.c(922,5) ]
   remark #15388: vectorization support: reference A_IA1 has aligned access   [ olap.c(922,5) ]
   remark #15388: vectorization support: reference C_csc_values has aligned access   [ olap.c(925,5) ]
   remark #15388: vectorization support: reference B_csc_values has aligned access   [ olap.c(925,5) ]
   remark #15388: vectorization support: reference A_csc_values has aligned access   [ olap.c(925,5) ]
   remark #15388: vectorization support: reference C_JA1 has aligned access   [ olap.c(928,5) ]
   remark #15388: vectorization support: reference B_JA1 has aligned access   [ olap.c(928,5) ]
   remark #15388: vectorization support: reference A_JA1 has aligned access   [ olap.c(928,5) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.158
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 5 
   remark #15449: unmasked aligned unit stride stores: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 30 
   remark #15477: vector loop cost: 4.750 
   remark #15478: estimated potential speedup: 5.870 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at olap.c(919,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference C_IA1 has aligned access   [ olap.c(922,5) ]
   remark #15388: vectorization support: reference A_IA1 has aligned access   [ olap.c(922,5) ]
   remark #15388: vectorization support: reference C_csc_values has aligned access   [ olap.c(925,5) ]
   remark #15388: vectorization support: reference B_csc_values has aligned access   [ olap.c(925,5) ]
   remark #15388: vectorization support: reference A_csc_values has aligned access   [ olap.c(925,5) ]
   remark #15388: vectorization support: reference C_JA1 has aligned access   [ olap.c(928,5) ]
   remark #15388: vectorization support: reference B_JA1 has aligned access   [ olap.c(928,5) ]
   remark #15388: vectorization support: reference A_JA1 has aligned access   [ olap.c(928,5) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.457
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at olap.c(919,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: csr_kron(float *, int *, int *, int, int, int, float *, int *, int *, int, int, int, float **, int **, int **, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at olap.c(1048,3)
   remark #15388: vectorization support: reference A_IA1 has aligned access   [ olap.c(1057,7) ]
   remark #15388: vectorization support: reference A_csc_values has aligned access   [ olap.c(1061,7) ]
   remark #15388: vectorization support: reference A_JA1 has aligned access   [ olap.c(1065,7) ]
   remark #15329: vectorization support: scatter was emulated for the variable C_IA1:  indirect access    [ olap.c(1058,7) ]
   remark #15329: vectorization support: scatter was emulated for the variable C_csc_values:  indirect access    [ olap.c(1061,7) ]
   remark #15329: vectorization support: scatter was emulated for the variable C_JA1:  indirect access    [ olap.c(1065,7) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.093
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15459: masked indexed (or scatter) stores: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 34 
   remark #15477: vector loop cost: 37.750 
   remark #15478: estimated potential speedup: 0.890 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at olap.c(1055,5)
      remark #25460: No loop optimizations reported
   LOOP END
LOOP END

LOOP BEGIN at olap.c(1048,3)
<Remainder loop for vectorization>

   LOOP BEGIN at olap.c(1055,5)
      remark #25460: No loop optimizations reported
   LOOP END
LOOP END
===========================================================================
