Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


Begin optimization report for: getfield(char *, int, char *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/olap_search.c(54,3)
   remark #15527: loop was not vectorized: function call to strtok(char *__restrict__, const char *__restrict__) cannot be vectorized   [ src/olap_search.c(55,21) ]
LOOP END
===========================================================================

Begin optimization report for: print_csc(float *, int *, int *, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/olap_search.c(69,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ src/olap_search.c(70,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at src/olap_search.c(74,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ src/olap_search.c(75,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at src/olap_search.c(79,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ src/olap_search.c(80,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: print_csr(float *, int *, int *, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/olap_search.c(94,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ src/olap_search.c(95,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at src/olap_search.c(99,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ src/olap_search.c(100,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at src/olap_search.c(104,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ src/olap_search.c(105,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: convert_and_write_to_csv(char *, float *, int *, int *, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/olap_search.c(159,5)
   remark #15523: loop was not vectorized: loop control variable pos was found, but loop iteration count cannot be computed before executing the loop
LOOP END
===========================================================================

Begin optimization report for: read_from_mx(char *, float **, int **, int **, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/olap_search.c(191,30)
   remark #15523: loop was not vectorized: loop control variable element_number was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at src/olap_search.c(225,3)
   remark #15523: loop was not vectorized: loop control variable pos was found, but loop iteration count cannot be computed before executing the loop
LOOP END
===========================================================================

Begin optimization report for: csr_hadamard(float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float **__restrict__, int **__restrict__, int **__restrict__, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/olap_search.c(389,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between A_IA1 line 391 and C_IA1 line 397
   remark #15346: vector dependence: assumed FLOW dependence between C_IA1 line 397 and A_IA1 line 391
LOOP END
===========================================================================

Begin optimization report for: csr_csr_krao(float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float **__restrict__, int **__restrict__, int **__restrict__, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/olap_search.c(537,11)
   remark #15388: vectorization support: reference C_IA1 has aligned access
   remark #15388: vectorization support: reference A_IA1 has aligned access
   remark #15388: vectorization support: reference C_csc_values has aligned access   [ src/olap_search.c(539,18) ]
   remark #15388: vectorization support: reference B_csc_values has aligned access   [ src/olap_search.c(539,18) ]
   remark #15388: vectorization support: reference A_csc_values has aligned access   [ src/olap_search.c(539,18) ]
   remark #15388: vectorization support: reference C_JA1 has aligned access   [ src/olap_search.c(540,11) ]
   remark #15388: vectorization support: reference B_JA1 has aligned access   [ src/olap_search.c(540,11) ]
   remark #15388: vectorization support: reference A_JA1 has aligned access   [ src/olap_search.c(540,11) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.200
   remark #15301: FUSED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 5 
   remark #15449: unmasked aligned unit stride stores: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 18 
   remark #15477: vector loop cost: 3.120 
   remark #15478: estimated potential speedup: 5.380 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at src/olap_search.c(540,11)
LOOP END

LOOP BEGIN at src/olap_search.c(537,11)
<Remainder loop for vectorization>
   remark #15313: remainder loop was not vectorized: unsupported data type
LOOP END
===========================================================================

Begin optimization report for: csr_csr_krao(float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float **__restrict__, int **__restrict__, int **__restrict__, int *, int *, int *) [core_2nd_gen_avx]

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/olap_search.c(537,11)
   remark #15388: vectorization support: reference C_IA1 has aligned access
   remark #15388: vectorization support: reference A_IA1 has aligned access
   remark #15388: vectorization support: reference C_csc_values has aligned access   [ src/olap_search.c(539,18) ]
   remark #15388: vectorization support: reference B_csc_values has aligned access   [ src/olap_search.c(539,18) ]
   remark #15388: vectorization support: reference A_csc_values has aligned access   [ src/olap_search.c(539,18) ]
   remark #15388: vectorization support: reference C_JA1 has aligned access   [ src/olap_search.c(540,11) ]
   remark #15388: vectorization support: reference B_JA1 has aligned access   [ src/olap_search.c(540,11) ]
   remark #15388: vectorization support: reference A_JA1 has aligned access   [ src/olap_search.c(540,11) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.200
   remark #15301: FUSED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 5 
   remark #15449: unmasked aligned unit stride stores: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 18 
   remark #15477: vector loop cost: 3.120 
   remark #15478: estimated potential speedup: 5.380 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at src/olap_search.c(540,11)
LOOP END

LOOP BEGIN at src/olap_search.c(537,11)
<Remainder loop for vectorization>
   remark #15313: remainder loop was not vectorized: unsupported data type
LOOP END
===========================================================================

Begin optimization report for: csr_csr_krao(float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float **__restrict__, int **__restrict__, int **__restrict__, int *, int *, int *) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/olap_search.c(537,11)
   remark #15388: vectorization support: reference C_IA1 has aligned access
   remark #15388: vectorization support: reference A_IA1 has aligned access
   remark #15388: vectorization support: reference C_csc_values has aligned access   [ src/olap_search.c(539,18) ]
   remark #15388: vectorization support: reference B_csc_values has aligned access   [ src/olap_search.c(539,18) ]
   remark #15388: vectorization support: reference A_csc_values has aligned access   [ src/olap_search.c(539,18) ]
   remark #15388: vectorization support: reference C_JA1 has aligned access   [ src/olap_search.c(540,11) ]
   remark #15388: vectorization support: reference B_JA1 has aligned access   [ src/olap_search.c(540,11) ]
   remark #15388: vectorization support: reference A_JA1 has aligned access   [ src/olap_search.c(540,11) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.083
   remark #15301: FUSED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 5 
   remark #15449: unmasked aligned unit stride stores: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 18 
   remark #15477: vector loop cost: 4.500 
   remark #15478: estimated potential speedup: 3.830 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at src/olap_search.c(540,11)
LOOP END

LOOP BEGIN at src/olap_search.c(537,11)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference C_IA1 has aligned access
   remark #15388: vectorization support: reference A_IA1 has aligned access
   remark #15388: vectorization support: reference C_csc_values has aligned access   [ src/olap_search.c(539,18) ]
   remark #15388: vectorization support: reference B_csc_values has aligned access   [ src/olap_search.c(539,18) ]
   remark #15388: vectorization support: reference A_csc_values has aligned access   [ src/olap_search.c(539,18) ]
   remark #15388: vectorization support: reference C_JA1 has aligned access   [ src/olap_search.c(540,11) ]
   remark #15388: vectorization support: reference B_JA1 has aligned access   [ src/olap_search.c(540,11) ]
   remark #15388: vectorization support: reference A_JA1 has aligned access   [ src/olap_search.c(540,11) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.382
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at src/olap_search.c(537,11)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: csc_csr_krao(float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float **__restrict__, int **__restrict__, int **__restrict__, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/olap_search.c(627,11)
   remark #15388: vectorization support: reference C_IA1 has aligned access
   remark #15388: vectorization support: reference A_IA1 has aligned access
   remark #15388: vectorization support: reference C_csc_values has aligned access   [ src/olap_search.c(629,18) ]
   remark #15388: vectorization support: reference B_csc_values has aligned access   [ src/olap_search.c(629,18) ]
   remark #15388: vectorization support: reference A_csc_values has aligned access   [ src/olap_search.c(629,18) ]
   remark #15388: vectorization support: reference C_JA1 has aligned access   [ src/olap_search.c(630,11) ]
   remark #15388: vectorization support: reference B_JA1 has aligned access   [ src/olap_search.c(630,11) ]
   remark #15388: vectorization support: reference A_JA1 has aligned access   [ src/olap_search.c(630,11) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.200
   remark #15301: FUSED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 5 
   remark #15449: unmasked aligned unit stride stores: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 18 
   remark #15477: vector loop cost: 3.120 
   remark #15478: estimated potential speedup: 5.380 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at src/olap_search.c(630,11)
LOOP END

LOOP BEGIN at src/olap_search.c(627,11)
<Remainder loop for vectorization>
   remark #15313: remainder loop was not vectorized: unsupported data type
LOOP END
===========================================================================

Begin optimization report for: csc_csr_krao(float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float **__restrict__, int **__restrict__, int **__restrict__, int *, int *, int *) [core_2nd_gen_avx]

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/olap_search.c(627,11)
   remark #15388: vectorization support: reference C_IA1 has aligned access
   remark #15388: vectorization support: reference A_IA1 has aligned access
   remark #15388: vectorization support: reference C_csc_values has aligned access   [ src/olap_search.c(629,18) ]
   remark #15388: vectorization support: reference B_csc_values has aligned access   [ src/olap_search.c(629,18) ]
   remark #15388: vectorization support: reference A_csc_values has aligned access   [ src/olap_search.c(629,18) ]
   remark #15388: vectorization support: reference C_JA1 has aligned access   [ src/olap_search.c(630,11) ]
   remark #15388: vectorization support: reference B_JA1 has aligned access   [ src/olap_search.c(630,11) ]
   remark #15388: vectorization support: reference A_JA1 has aligned access   [ src/olap_search.c(630,11) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.200
   remark #15301: FUSED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 5 
   remark #15449: unmasked aligned unit stride stores: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 18 
   remark #15477: vector loop cost: 3.120 
   remark #15478: estimated potential speedup: 5.380 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at src/olap_search.c(630,11)
LOOP END

LOOP BEGIN at src/olap_search.c(627,11)
<Remainder loop for vectorization>
   remark #15313: remainder loop was not vectorized: unsupported data type
LOOP END
===========================================================================

Begin optimization report for: csc_csr_krao(float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float *__restrict__, int *__restrict__, int *__restrict__, int, int, int, float **__restrict__, int **__restrict__, int **__restrict__, int *, int *, int *) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/olap_search.c(627,11)
   remark #15388: vectorization support: reference C_IA1 has aligned access
   remark #15388: vectorization support: reference A_IA1 has aligned access
   remark #15388: vectorization support: reference C_csc_values has aligned access   [ src/olap_search.c(629,18) ]
   remark #15388: vectorization support: reference B_csc_values has aligned access   [ src/olap_search.c(629,18) ]
   remark #15388: vectorization support: reference A_csc_values has aligned access   [ src/olap_search.c(629,18) ]
   remark #15388: vectorization support: reference C_JA1 has aligned access   [ src/olap_search.c(630,11) ]
   remark #15388: vectorization support: reference B_JA1 has aligned access   [ src/olap_search.c(630,11) ]
   remark #15388: vectorization support: reference A_JA1 has aligned access   [ src/olap_search.c(630,11) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.083
   remark #15301: FUSED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 5 
   remark #15449: unmasked aligned unit stride stores: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 18 
   remark #15477: vector loop cost: 4.500 
   remark #15478: estimated potential speedup: 3.830 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at src/olap_search.c(630,11)
LOOP END

LOOP BEGIN at src/olap_search.c(627,11)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference C_IA1 has aligned access
   remark #15388: vectorization support: reference A_IA1 has aligned access
   remark #15388: vectorization support: reference C_csc_values has aligned access   [ src/olap_search.c(629,18) ]
   remark #15388: vectorization support: reference B_csc_values has aligned access   [ src/olap_search.c(629,18) ]
   remark #15388: vectorization support: reference A_csc_values has aligned access   [ src/olap_search.c(629,18) ]
   remark #15388: vectorization support: reference C_JA1 has aligned access   [ src/olap_search.c(630,11) ]
   remark #15388: vectorization support: reference B_JA1 has aligned access   [ src/olap_search.c(630,11) ]
   remark #15388: vectorization support: reference A_JA1 has aligned access   [ src/olap_search.c(630,11) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.382
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at src/olap_search.c(627,11)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: csr_kron(float *, int *, int *, int, int, int, float *, int *, int *, int, int, int, float **, int **, int **, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/olap_search.c(761,3)
   remark #15388: vectorization support: reference A_IA1 has aligned access   [ src/olap_search.c(763,21) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.030
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 5 
   remark #15463: unmasked indexed (or scatter) stores: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 34 
   remark #15477: vector loop cost: 453.750 
   remark #15478: estimated potential speedup: 0.070 
   remark #15487: type converts: 10 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at src/olap_search.c(763,21)
   LOOP END

   LOOP BEGIN at src/olap_search.c(765,21)
   LOOP END
LOOP END

LOOP BEGIN at src/olap_search.c(761,3)
<Remainder loop for vectorization>

   LOOP BEGIN at src/olap_search.c(763,21)
      remark #25460: No loop optimizations reported
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: csr_kron(float *, int *, int *, int, int, int, float *, int *, int *, int, int, int, float **, int **, int **, int *, int *, int *) [core_2nd_gen_avx]

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/olap_search.c(761,3)
   remark #15388: vectorization support: reference A_IA1 has aligned access   [ src/olap_search.c(763,21) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.041
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 5 
   remark #15463: unmasked indexed (or scatter) stores: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 30 
   remark #15477: vector loop cost: 328.750 
   remark #15478: estimated potential speedup: 0.090 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at src/olap_search.c(763,21)
   LOOP END

   LOOP BEGIN at src/olap_search.c(765,21)
   LOOP END
LOOP END

LOOP BEGIN at src/olap_search.c(761,3)
<Remainder loop for vectorization>

   LOOP BEGIN at src/olap_search.c(763,21)
      remark #25460: No loop optimizations reported
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: csr_kron(float *, int *, int *, int, int, int, float *, int *, int *, int, int, int, float **, int **, int **, int *, int *, int *) [generic]

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/olap_search.c(761,3)
   remark #15388: vectorization support: reference A_IA1 has aligned access   [ src/olap_search.c(763,21) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.030
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 5 
   remark #15463: unmasked indexed (or scatter) stores: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 34 
   remark #15477: vector loop cost: 453.750 
   remark #15478: estimated potential speedup: 0.070 
   remark #15487: type converts: 10 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at src/olap_search.c(763,21)
   LOOP END

   LOOP BEGIN at src/olap_search.c(765,21)
   LOOP END
LOOP END

LOOP BEGIN at src/olap_search.c(761,3)
<Remainder loop for vectorization>

   LOOP BEGIN at src/olap_search.c(763,21)
      remark #25460: No loop optimizations reported
   LOOP END
LOOP END
===========================================================================
